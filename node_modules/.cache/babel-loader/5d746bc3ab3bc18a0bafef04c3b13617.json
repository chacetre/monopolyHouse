{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hookpedals/src/views/Stock/components/NewCompentModal.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Modal, Card, CardHeader, CardContent, CardActions, Grid, Divider, Typography, TextField, Switch, Button, FormControl, Select, FormControlLabel } from '@material-ui/core';\nimport CloseRounded from '@material-ui/icons/CloseRounded';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport { saveNewTypeInDataBase, saveNewValueInDataBase, saveNewSousTypeInDataBase } from '../../../request/stockAPI';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    outline: 'none',\n    boxShadow: theme.shadows[20],\n    width: 700,\n    maxHeight: '100%',\n    overflowY: 'auto',\n    maxWidth: '100%'\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  },\n  toggleButton: {\n    height: '100%'\n  },\n  div: {\n    display: 'flex'\n  },\n  center: {\n    marginBottom: 20\n  },\n  containerBottom: {\n    marginTop: 20\n  }\n}));\n\nfunction NewCompentModal({\n  open,\n  onClose,\n  composent,\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  const [values, setValues] = useState({});\n  const [component, setComponent] = useState({});\n\n  const handleChange = event => {\n    event.persist();\n\n    if (event.target.name === 'type') {\n      setValues(prevValues => ({\n        [event.target.name]: event.target.value\n      }));\n    } else {\n      setValues(prevValues => ({ ...prevValues,\n        [event.target.name]: event.target.value\n      }));\n    }\n  };\n\n  const saveNewValues = () => {\n    let index = 0;\n\n    if (values.Stype !== undefined) {\n      index = composent.componentsStock[values.type][values.Stype].length;\n    }\n\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock\n    };\n    saveNewValueInDataBase(values.type, values.Stype, scheme, index);\n  };\n\n  const saveNewType = () => {\n    let index = composent.componentsAvailable.length;\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock\n    };\n    saveNewTypeInDataBase(values.newType, scheme, index);\n  };\n\n  const saveNewSousType = () => {\n    let index = composent.componentsStock[values.type].typeAvailable.length;\n    let newSousTypeValue = values.newType;\n    if (values.newSType !== undefined) newSousTypeValue = values.newSType;\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock\n    };\n    saveNewSousTypeInDataBase(values.type, newSousTypeValue, scheme, index);\n  };\n\n  const cancelClose = () => {\n    onClose();\n  };\n\n  const saveClose = () => {\n    console.log('schema', values);\n    if (values.type === 'newType') saveNewType();\n    if (values.type !== 'newType' && values.Stype === 'newSType') saveNewSousType();\n    if (values.type !== 'newType' && values.Stype !== 'newSType') saveNewValues();\n    setValues({});\n    onClose();\n  };\n\n  useEffect(() => {\n    console.log('composent', composent);\n    setComponent(composent);\n  }, [composent]);\n\n  if (!open) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    onClose: onClose,\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: \"Nouveau composant\",\n    action: /*#__PURE__*/React.createElement(Button, {\n      onClick: cancelClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CloseRounded, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl,\n    variant: \"outlined\",\n    name: \"type\",\n    size: \"small\",\n    fullWidth: true,\n    values: values.type,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    native: true,\n    defaultValue: \"\",\n    id: \"grouped-native-select\",\n    name: \"type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 19\n    }\n  }, component.componentsAvailable !== undefined && component.componentsAvailable.map(option => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"option\", {\n    value: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 27\n    }\n  }, option.toUpperCase()))), /*#__PURE__*/React.createElement(\"option\", {\n    value: 'newType',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 21\n    }\n  }, \"NOUVELLE CATEGORIE\")))), values.type === 'newType' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-select-value\",\n    label: \"new categorie\",\n    name: \"newType\",\n    fullWidth: true,\n    value: values.newType,\n    onChange: handleChange,\n    variant: \"outlined\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-select-value\",\n    label: \"new sous type\",\n    name: \"newSType\",\n    fullWidth: true,\n    value: values.newSType,\n    onChange: handleChange,\n    variant: \"outlined\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 19\n    }\n  })), values.type !== 'newType' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl,\n    variant: \"outlined\",\n    size: \"small\",\n    fullWidth: true,\n    name: \"Stype\",\n    values: values.Stype,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    native: true,\n    defaultValue: \"\",\n    id: \"grouped-native-select\",\n    name: \"Stype\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 23\n    }\n  }, component.componentsStock !== undefined && values.type != undefined && component.componentsStock[values.type].typeAvailable.map(option => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"option\", {\n    value: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 31\n    }\n  }, option.toUpperCase()))), /*#__PURE__*/React.createElement(\"option\", {\n    value: 'newSType',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 25\n    }\n  }, \"NOUVELLE CATEGORIE\"))))), values.Stype === 'newSType' && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-select-value\",\n    label: \"new sous type\",\n    name: \"newSType\",\n    fullWidth: true,\n    value: values.newSType,\n    onChange: handleChange,\n    variant: \"outlined\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 19\n    }\n  })), values.Stype !== 'newSType' && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 47\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.containerBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-select-value\",\n    label: \"Valeur\",\n    name: \"value\",\n    helperText: \"ex: twoOhm, threeNf\",\n    fullWidth: true,\n    value: values.value,\n    onChange: handleChange,\n    variant: \"outlined\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-select-value\",\n    label: \"Label\",\n    name: \"label\",\n    helperText: \"Nom d'affichage\",\n    fullWidth: true,\n    value: values.label,\n    onChange: handleChange,\n    variant: \"outlined\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    name: \"stock\",\n    label: \"Stock\",\n    onChange: handleChange,\n    value: values.stock || 0,\n    variant: \"outlined\",\n    size: \"small\",\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardActions, {\n    className: classes.actions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: saveClose,\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }\n  }, \"Ajouter\")))));\n}\n\nNewCompentModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\nNewCompentModal.defaultProps = {\n  open: false,\n  onClose: () => {}\n};\nexport default NewCompentModal;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hookpedals/src/views/Stock/components/NewCompentModal.js"],"names":["React","useState","useEffect","PropTypes","clsx","makeStyles","Modal","Card","CardHeader","CardContent","CardActions","Grid","Divider","Typography","TextField","Switch","Button","FormControl","Select","FormControlLabel","CloseRounded","ToggleButton","ToggleButtonGroup","saveNewTypeInDataBase","saveNewValueInDataBase","saveNewSousTypeInDataBase","useStyles","theme","root","position","top","left","transform","outline","boxShadow","shadows","width","maxHeight","overflowY","maxWidth","actions","justifyContent","toggleButton","height","div","display","center","marginBottom","containerBottom","marginTop","NewCompentModal","open","onClose","composent","className","rest","classes","values","setValues","component","setComponent","handleChange","event","persist","target","name","prevValues","value","saveNewValues","index","Stype","undefined","componentsStock","type","length","scheme","label","stock","saveNewType","componentsAvailable","newType","saveNewSousType","typeAvailable","newSousTypeValue","newSType","cancelClose","saveClose","console","log","formControl","map","option","toUpperCase","propTypes","string","customer","any","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Modal,\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Grid,\n  Divider,\n  Typography,\n  TextField,\n  Switch,\n  Button,\n  FormControl,\n  Select,\n  FormControlLabel\n} from '@material-ui/core';\nimport CloseRounded from '@material-ui/icons/CloseRounded';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport {\n  saveNewTypeInDataBase,\n  saveNewValueInDataBase,\n  saveNewSousTypeInDataBase\n} from '../../../request/stockAPI';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    outline: 'none',\n    boxShadow: theme.shadows[20],\n    width: 700,\n    maxHeight: '100%',\n    overflowY: 'auto',\n    maxWidth: '100%'\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  },\n  toggleButton: {\n    height: '100%'\n  },\n  div: {\n    display: 'flex'\n  },\n  center: {\n    marginBottom: 20\n  },\n  containerBottom: {\n    marginTop: 20\n  }\n}));\n\nfunction NewCompentModal({ open, onClose, composent, className, ...rest }) {\n  const classes = useStyles();\n  const [values, setValues] = useState({});\n  const [component, setComponent] = useState({});\n\n  const handleChange = event => {\n    event.persist();\n\n    if (event.target.name === 'type') {\n      setValues(prevValues => ({\n        [event.target.name]: event.target.value\n      }));\n    } else {\n      setValues(prevValues => ({\n        ...prevValues,\n        [event.target.name]: event.target.value\n      }));\n    }\n  };\n\n  const saveNewValues = () => {\n    let index = 0;\n    if (values.Stype !== undefined) {\n      index = composent.componentsStock[values.type][values.Stype].length;\n    }\n\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock\n    };\n    saveNewValueInDataBase(values.type, values.Stype, scheme, index);\n  };\n\n  const saveNewType = () => {\n    let index = composent.componentsAvailable.length;\n\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock\n    };\n    saveNewTypeInDataBase(values.newType, scheme, index);\n  };\n\n  const saveNewSousType = () => {\n    let index = composent.componentsStock[values.type].typeAvailable.length;\n\n    let newSousTypeValue = values.newType;\n    if (values.newSType !== undefined) newSousTypeValue = values.newSType;\n\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock\n    };\n    saveNewSousTypeInDataBase(values.type, newSousTypeValue, scheme, index);\n  };\n\n  const cancelClose = () => {\n    onClose();\n  };\n\n  const saveClose = () => {\n    console.log('schema', values);\n\n    if (values.type === 'newType') saveNewType();\n\n    if (values.type !== 'newType' && values.Stype === 'newSType')\n      saveNewSousType();\n\n    if (values.type !== 'newType' && values.Stype !== 'newSType')\n      saveNewValues();\n\n    setValues({});\n    onClose();\n  };\n\n  useEffect(() => {\n    console.log('composent', composent);\n    setComponent(composent);\n  }, [composent]);\n\n  if (!open) {\n    return null;\n  }\n\n  return (\n    <Modal onClose={onClose} open={open}>\n      <Card {...rest} className={clsx(classes.root, className)}>\n        <form>\n          <CardHeader\n            title=\"Nouveau composant\"\n            action={\n              <Button onClick={cancelClose}>\n                <CloseRounded />\n              </Button>\n            }\n          />\n          <Divider />\n          <CardContent>\n            <Grid container spacing={1}>\n              <Grid item xs={3}>\n                <FormControl\n                  className={classes.formControl}\n                  variant=\"outlined\"\n                  name=\"type\"\n                  size=\"small\"\n                  fullWidth\n                  values={values.type}\n                  onChange={handleChange}\n                >\n                  <Select\n                    native\n                    defaultValue=\"\"\n                    id=\"grouped-native-select\"\n                    name=\"type\"\n                  >\n                    {component.componentsAvailable !== undefined &&\n                      component.componentsAvailable.map(option => (\n                        <>\n                          <option value={option}>{option.toUpperCase()}</option>\n                        </>\n                      ))}\n                    <option value={'newType'}>NOUVELLE CATEGORIE</option>\n                  </Select>\n                </FormControl>\n              </Grid>\n              {values.type === 'newType' && (\n                <>\n                  <Grid item xs={3}>\n                    <TextField\n                      id=\"outlined-select-value\"\n                      label=\"new categorie\"\n                      name=\"newType\"\n                      fullWidth\n                      value={values.newType}\n                      onChange={handleChange}\n                      variant=\"outlined\"\n                      size=\"small\"\n                    />\n                  </Grid>\n                  <Grid item xs={3}>\n                    <TextField\n                      id=\"outlined-select-value\"\n                      label=\"new sous type\"\n                      name=\"newSType\"\n                      fullWidth\n                      value={values.newSType}\n                      onChange={handleChange}\n                      variant=\"outlined\"\n                      size=\"small\"\n                    />\n                  </Grid>\n                  <Grid item xs={3} />\n                </>\n              )}\n              {values.type !== 'newType' && (\n                <>\n                  <Grid item xs={3}>\n                    <FormControl\n                      className={classes.formControl}\n                      variant=\"outlined\"\n                      size=\"small\"\n                      fullWidth\n                      name=\"Stype\"\n                      values={values.Stype}\n                      onChange={handleChange}\n                    >\n                      <Select\n                        native\n                        defaultValue=\"\"\n                        id=\"grouped-native-select\"\n                        name=\"Stype\"\n                      >\n                        {component.componentsStock !== undefined &&\n                          values.type != undefined &&\n                          component.componentsStock[\n                            values.type\n                          ].typeAvailable.map(option => (\n                            <>\n                              <option value={option}>\n                                {option.toUpperCase()}\n                              </option>\n                            </>\n                          ))}\n                        <option value={'newSType'}>NOUVELLE CATEGORIE</option>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                </>\n              )}\n              {values.Stype === 'newSType' && (\n                <Grid item xs={3}>\n                  <TextField\n                    id=\"outlined-select-value\"\n                    label=\"new sous type\"\n                    name=\"newSType\"\n                    fullWidth\n                    value={values.newSType}\n                    onChange={handleChange}\n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                </Grid>\n              )}\n              {values.Stype !== 'newSType' && <Grid item xs={6} />}\n            </Grid>\n            <Grid container spacing={1} className={classes.containerBottom}>\n              <Grid item xs={3}>\n                <TextField\n                  id=\"outlined-select-value\"\n                  label=\"Valeur\"\n                  name=\"value\"\n                  helperText=\"ex: twoOhm, threeNf\"\n                  fullWidth\n                  value={values.value}\n                  onChange={handleChange}\n                  variant=\"outlined\"\n                  size=\"small\"\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <TextField\n                  id=\"outlined-select-value\"\n                  label=\"Label\"\n                  name=\"label\"\n                  helperText=\"Nom d'affichage\"\n                  fullWidth\n                  value={values.label}\n                  onChange={handleChange}\n                  variant=\"outlined\"\n                  size=\"small\"\n                />\n              </Grid>\n              <Grid item xs={2}>\n                <TextField\n                  fullWidth\n                  name=\"stock\"\n                  label=\"Stock\"\n                  onChange={handleChange}\n                  value={values.stock || 0}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  type=\"number\"\n                />\n              </Grid>\n            </Grid>\n          </CardContent>\n          <Divider />\n          <CardActions className={classes.actions}>\n            <Button color=\"primary\" onClick={saveClose} variant=\"contained\">\n              Ajouter\n            </Button>\n          </CardActions>\n        </form>\n      </Card>\n    </Modal>\n  );\n}\n\nNewCompentModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\n\nNewCompentModal.defaultProps = {\n  open: false,\n  onClose: () => {}\n};\n\nexport default NewCompentModal;\n"]},"metadata":{},"sourceType":"module"}