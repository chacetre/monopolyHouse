{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hookpedals/src/views/Dashboard/components/UsersByDevice/UsersByDevice.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport { Card, CardHeader, CardContent, IconButton, Divider, Typography, colors } from '@material-ui/core';\nimport LaptopMacIcon from '@material-ui/icons/LaptopMac';\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport TabletMacIcon from '@material-ui/icons/TabletMac';\nimport { getPedalsDataBase } from 'request/pedalsAPI';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  chartContainer: {\n    position: 'relative',\n    height: '300px'\n  },\n  stats: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  device: {\n    textAlign: 'center',\n    padding: theme.spacing(1)\n  },\n  deviceIcon: {\n    color: theme.palette.icon\n  }\n}));\n\nconst UsersByDevice = props => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [dataPedals, setDataPedals] = useState({});\n  const [pedalsList, setPedalsList] = useState([]);\n  const colorBase = \"red\";\n  const colorNumber = 500;\n  const [data, setData] = useState({\n    datasets: [{\n      data: [63, 15, 22],\n      backgroundColor: [theme.palette.primary.main, theme.palette.error.main, theme.palette.error.main]\n    }],\n    labels: ['Desktop', 'Tablet', 'Mobile']\n  });\n\n  function generateRandomColor() {\n    const randomColor = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n    console.log(\"random color\", randomColor);\n    return colors.colorBase[colorNumber];\n  }\n\n  function formateData() {\n    const newArray = [];\n    const values = [];\n    const colors = [];\n    const labels = [];\n    Object.values(dataPedals).forEach(element => {\n      const color = generateRandomColor();\n      const scheme = {\n        title: element.title,\n        value: element.totalMade,\n        color: color\n      };\n      values.push(element.totalMade);\n      colors.push(color);\n      labels.push(element.title);\n      newArray.push(scheme);\n    });\n    console.log('newArray', newArray);\n    setPedalsList(newArray);\n    setData({\n      datasets: [{\n        data: values,\n        backgroundColor: colors\n      }],\n      labels: labels\n    });\n  }\n\n  useEffect(() => {\n    formateData();\n  }, [dataPedals]);\n  useEffect(() => {\n    getPedalsDataBase(response => {\n      console.log('element', response);\n      setDataPedals(response);\n    });\n  }, []);\n  const options = {\n    legend: {\n      display: false\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 80,\n    layout: {\n      padding: 0\n    },\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary\n    }\n  };\n  return /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(CardHeader, {\n    action: /*#__PURE__*/React.createElement(IconButton, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RefreshIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    })),\n    title: \"P\\xE9dales r\\xE9aliser\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.stats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, pedalsList.map(pedal => /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.device,\n    key: pedal.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, pedal.title), /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      color: pedal.color\n    },\n    variant: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, pedal.value))))));\n};\n\nUsersByDevice.propTypes = {\n  className: PropTypes.string\n};\nexport default UsersByDevice;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hookpedals/src/views/Dashboard/components/UsersByDevice/UsersByDevice.js"],"names":["React","useEffect","useState","Doughnut","clsx","PropTypes","makeStyles","useTheme","Card","CardHeader","CardContent","IconButton","Divider","Typography","colors","LaptopMacIcon","PhoneIphoneIcon","RefreshIcon","TabletMacIcon","getPedalsDataBase","useStyles","theme","root","height","chartContainer","position","stats","marginTop","spacing","display","justifyContent","device","textAlign","padding","deviceIcon","color","palette","icon","UsersByDevice","props","className","rest","classes","dataPedals","setDataPedals","pedalsList","setPedalsList","colorBase","colorNumber","data","setData","datasets","backgroundColor","primary","main","error","labels","generateRandomColor","randomColor","Math","random","toString","substr","console","log","formateData","newArray","values","Object","forEach","element","scheme","title","value","totalMade","push","response","options","legend","responsive","maintainAspectRatio","animation","cutoutPercentage","layout","tooltips","enabled","mode","intersect","borderWidth","borderColor","divider","white","titleFontColor","text","bodyFontColor","secondary","footerFontColor","map","pedal","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  IconButton,\n  Divider,\n  Typography, \n  colors\n} from '@material-ui/core';\nimport LaptopMacIcon from '@material-ui/icons/LaptopMac';\nimport PhoneIphoneIcon from '@material-ui/icons/PhoneIphone';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport TabletMacIcon from '@material-ui/icons/TabletMac';\nimport { getPedalsDataBase } from 'request/pedalsAPI';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  chartContainer: {\n    position: 'relative',\n    height: '300px'\n  },\n  stats: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  device: {\n    textAlign: 'center',\n    padding: theme.spacing(1)\n  },\n  deviceIcon: {\n    color: theme.palette.icon\n  }\n}));\n\nconst UsersByDevice = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const [dataPedals, setDataPedals] = useState({});\n  const [pedalsList, setPedalsList] = useState([]);\n const colorBase = \"red\";\n const colorNumber = 500;\n\n\n  const [data, setData] = useState({\n    datasets: [\n      {\n        data: [63, 15, 22],\n        backgroundColor: [\n          theme.palette.primary.main,\n          theme.palette.error.main,\n          theme.palette.error.main\n        ]\n      }\n    ],\n    labels: ['Desktop', 'Tablet', 'Mobile']\n  });\n\n  function generateRandomColor() {\n    const randomColor = '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6)\n    console.log(\"random color\",randomColor);\n    return colors.colorBase[colorNumber];\n  }\n\n  function formateData() {\n    const newArray = [];\n    const values = [];\n    const colors = [];\n    const labels = [];\n\n    Object.values(dataPedals).forEach(element => {\n      const color = generateRandomColor();\n      const scheme = {\n        title: element.title,\n        value: element.totalMade,\n        color: color\n      };\n      values.push(element.totalMade);\n      colors.push(color);\n      labels.push(element.title);\n      newArray.push(scheme);\n    });\n\n    console.log('newArray', newArray);\n    setPedalsList(newArray);\n\n    setData({\n      datasets: [\n        {\n          data: values,\n          backgroundColor: colors\n        }\n      ],\n      labels: labels\n    })\n  }\n\n  useEffect(() => {\n    formateData();\n  }, [dataPedals]);\n\n  useEffect(() => {\n    getPedalsDataBase(response => {\n      console.log('element', response);\n      setDataPedals(response);\n    });\n  }, []);\n\n  const options = {\n    legend: {\n      display: false\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 80,\n    layout: { padding: 0 },\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary\n    }\n  };\n\n  return (\n    <Card {...rest} className={clsx(classes.root, className)}>\n      <CardHeader\n        action={\n          <IconButton size=\"small\">\n            <RefreshIcon />\n          </IconButton>\n        }\n        title=\"Pédales réaliser\"\n      />\n      <Divider />\n      <CardContent>\n        <div className={classes.chartContainer}>\n          <Doughnut data={data} options={options} />\n        </div>\n        <div className={classes.stats}>\n          {pedalsList.map(pedal => (\n            <div className={classes.device} key={pedal.title}>\n              <Typography variant=\"body1\">{pedal.title}</Typography>\n              <Typography style={{ color: pedal.color }} variant=\"h2\">\n                {pedal.value}\n              </Typography>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nUsersByDevice.propTypes = {\n  className: PropTypes.string\n};\n\nexport default UsersByDevice;\n"]},"metadata":{},"sourceType":"module"}