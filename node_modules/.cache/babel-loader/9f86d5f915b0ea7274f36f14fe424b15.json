{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hookpedals/src/views/Stock/components/Toolbar.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport { Button } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport UpdateStockModal from \"./UpdateStockModal\";\nimport NewCompentModal from \"./NewCompentModal\";\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  row: {\n    height: \"42px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    marginTop: theme.spacing(1)\n  },\n  spacer: {\n    flexGrow: 1\n  },\n  importButton: {\n    marginRight: theme.spacing(1)\n  },\n  exportButton: {\n    marginRight: theme.spacing(1)\n  },\n  searchInput: {\n    marginRight: theme.spacing(1)\n  },\n  center: {\n    marginTop: 10,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n}));\nconst StyledToggleButtonGroup = withStyles(theme => ({\n  grouped: {\n    margin: theme.spacing(1),\n    border: \"none\",\n    background: theme.palette.background.default,\n    padding: theme.spacing(0, 3),\n    \"&:not(:first-child)\": {\n      borderRadius: theme.shape.borderRadius\n    },\n    \"&:first-child\": {\n      borderRadius: theme.shape.borderRadius\n    }\n  }\n}))(ToggleButtonGroup);\n\nconst Toolbar = props => {\n  const {\n    className,\n    onChange,\n    users,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const [component, setComponent] = useState(\"resistor\");\n  const [openUpdateModal, setOpenUpdateModal] = useState(false);\n  const [openNewModal, setOpenNewModal] = useState(false);\n  const [componentInfo, setComponentInfo] = useState({});\n\n  const handleComponent = (event, newComponent) => {\n    setComponent(newComponent);\n    onChange(newComponent);\n  };\n\n  const handleClickUpdate = event => {\n    setOpenUpdateModal(true);\n  };\n\n  const handleClickNewComponent = event => {\n    setOpenNewModal(true);\n  };\n\n  useEffect(() => {\n    if (users !== undefined) {\n      console.log(\"component toolbar\", users);\n      setComponentInfo(users);\n    }\n  }, [users]);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(UpdateStockModal, {\n    composent: componentInfo,\n    onClose: color => {\n      setOpenUpdateModal(false);\n    },\n    open: openUpdateModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(NewCompentModal, {\n    composent: componentInfo,\n    onClose: color => {\n      setOpenNewModal(false);\n    },\n    open: openNewModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.spacer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    variant: \"outlined\",\n    onClick: handleClickNewComponent,\n    className: classes.importButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Nouveau Composant\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    onClick: handleClickUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"Mise \\xE0 jour du Stock\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, componentInfo.componentsAvailable !== undefined && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledToggleButtonGroup, {\n    size: \"small\",\n    value: component,\n    exclusive: true,\n    onChange: handleComponent,\n    \"aria-label\": \"text alignment\",\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, componentInfo.componentsAvailable.slice(5).map(user => /*#__PURE__*/React.createElement(ToggleButton, {\n    value: user,\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, user))), /*#__PURE__*/React.createElement(StyledToggleButtonGroup, {\n    size: \"small\",\n    value: component,\n    exclusive: true,\n    onChange: handleComponent,\n    \"aria-label\": \"text alignment\",\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, componentInfo.componentsAvailable.map(user => /*#__PURE__*/React.createElement(ToggleButton, {\n    value: user,\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }, user))))));\n};\n\nToolbar.propTypes = {\n  className: PropTypes.string,\n  onChange: PropTypes.func\n};\nexport default Toolbar;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hookpedals/src/views/Stock/components/Toolbar.js"],"names":["React","useState","useEffect","PropTypes","clsx","makeStyles","withStyles","Button","ToggleButton","ToggleButtonGroup","UpdateStockModal","NewCompentModal","useStyles","theme","root","row","height","display","alignItems","marginTop","spacing","spacer","flexGrow","importButton","marginRight","exportButton","searchInput","center","justifyContent","StyledToggleButtonGroup","grouped","margin","border","background","palette","default","padding","borderRadius","shape","Toolbar","props","className","onChange","users","rest","classes","component","setComponent","openUpdateModal","setOpenUpdateModal","openNewModal","setOpenNewModal","componentInfo","setComponentInfo","handleComponent","event","newComponent","handleClickUpdate","handleClickNewComponent","undefined","console","log","color","componentsAvailable","slice","map","user","propTypes","string","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,qBAAvC;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,MAAMC,SAAS,GAAGP,UAAU,CAAEQ,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE,EADiC;AAEvCC,EAAAA,GAAG,EAAE;AACHC,IAAAA,MAAM,EAAE,MADL;AAEHC,IAAAA,OAAO,EAAE,MAFN;AAGHC,IAAAA,UAAU,EAAE,QAHT;AAIHC,IAAAA,SAAS,EAAEN,KAAK,CAACO,OAAN,CAAc,CAAd;AAJR,GAFkC;AAQvCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE;AADJ,GAR+B;AAWvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAEX,KAAK,CAACO,OAAN,CAAc,CAAd;AADD,GAXyB;AAcvCK,EAAAA,YAAY,EAAE;AACZD,IAAAA,WAAW,EAAEX,KAAK,CAACO,OAAN,CAAc,CAAd;AADD,GAdyB;AAiBvCM,EAAAA,WAAW,EAAE;AACXF,IAAAA,WAAW,EAAEX,KAAK,CAACO,OAAN,CAAc,CAAd;AADF,GAjB0B;AAoBvCO,EAAAA,MAAM,EAAE;AACNR,IAAAA,SAAS,EAAE,EADL;AAENF,IAAAA,OAAO,EAAE,MAFH;AAGNW,IAAAA,cAAc,EAAE,QAHV;AAINV,IAAAA,UAAU,EAAE;AAJN;AApB+B,CAAZ,CAAD,CAA5B;AA4BA,MAAMW,uBAAuB,GAAGvB,UAAU,CAAEO,KAAD,KAAY;AACrDiB,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAElB,KAAK,CAACO,OAAN,CAAc,CAAd,CADD;AAEPY,IAAAA,MAAM,EAAE,MAFD;AAGPC,IAAAA,UAAU,EAAEpB,KAAK,CAACqB,OAAN,CAAcD,UAAd,CAAyBE,OAH9B;AAIPC,IAAAA,OAAO,EAAEvB,KAAK,CAACO,OAAN,CAAc,CAAd,EAAiB,CAAjB,CAJF;AAKP,2BAAuB;AACrBiB,MAAAA,YAAY,EAAExB,KAAK,CAACyB,KAAN,CAAYD;AADL,KALhB;AAQP,qBAAiB;AACfA,MAAAA,YAAY,EAAExB,KAAK,CAACyB,KAAN,CAAYD;AADX;AARV;AAD4C,CAAZ,CAAD,CAAV,CAa5B5B,iBAb4B,CAAhC;;AAeA,MAAM8B,OAAO,GAAIC,KAAD,IAAW;AACzB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA,KAAvB;AAA8B,OAAGC;AAAjC,MAA0CJ,KAAhD;AAEA,QAAMK,OAAO,GAAGjC,SAAS,EAAzB;AACA,QAAM,CAACkC,SAAD,EAAYC,YAAZ,IAA4B9C,QAAQ,CAAC,UAAD,CAA1C;AACA,QAAM,CAAC+C,eAAD,EAAkBC,kBAAlB,IAAwChD,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACiD,YAAD,EAAeC,eAAf,IAAkClD,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACmD,aAAD,EAAgBC,gBAAhB,IAAoCpD,QAAQ,CAAC,EAAD,CAAlD;;AAEA,QAAMqD,eAAe,GAAG,CAACC,KAAD,EAAQC,YAAR,KAAyB;AAC/CT,IAAAA,YAAY,CAACS,YAAD,CAAZ;AACAd,IAAAA,QAAQ,CAACc,YAAD,CAAR;AACD,GAHD;;AAKA,QAAMC,iBAAiB,GAAIF,KAAD,IAAW;AACnCN,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAFD;;AAIA,QAAMS,uBAAuB,GAAIH,KAAD,IAAW;AACzCJ,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAFD;;AAIAjD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyC,KAAK,KAAKgB,SAAd,EAAyB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiClB,KAAjC;AACAU,MAAAA,gBAAgB,CAACV,KAAD,CAAhB;AACD;AACF,GALQ,EAKN,CAACA,KAAD,CALM,CAAT;AAOA,sBACE,6CAASC,IAAT;AAAe,IAAA,SAAS,EAAExC,IAAI,CAACyC,OAAO,CAAC/B,IAAT,EAAe2B,SAAf,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,oBAAC,gBAAD;AACE,IAAA,SAAS,EAAEW,aADb;AAEE,IAAA,OAAO,EAAGU,KAAD,IAAW;AAClBb,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,KAJH;AAKE,IAAA,IAAI,EAAED,eALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAQE,oBAAC,eAAD;AACE,IAAA,SAAS,EAAEI,aADb;AAEE,IAAA,OAAO,EAAGU,KAAD,IAAW;AAClBX,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAJH;AAKE,IAAA,IAAI,EAAED,YALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eAeE;AAAK,IAAA,SAAS,EAAEL,OAAO,CAAC9B,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAE8B,OAAO,CAACxB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,OAAO,EAAEqC,uBAHX;AAIE,IAAA,SAAS,EAAEb,OAAO,CAACtB,YAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF,eAUE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,OAAO,EAAEkC,iBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAVF,CAfF,eAiCE;AAAK,IAAA,SAAS,EAAEZ,OAAO,CAAClB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGyB,aAAa,CAACW,mBAAd,KAAsCJ,SAAtC,iBACC,uDACE,oBAAC,uBAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAEb,SAFT;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,QAAQ,EAAEQ,eAJZ;AAKE,kBAAW,gBALb;AAME,IAAA,SAAS,EAAET,OAAO,CAAClB,MANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGyB,aAAa,CAACW,mBAAd,CAAkCC,KAAlC,CAAwC,CAAxC,EAA2CC,GAA3C,CAAgDC,IAAD,iBAC9C,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,IAArB;AAA2B,kBAAW,cAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,CADD,CARH,CADF,eAeE,oBAAC,uBAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAEpB,SAFT;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,QAAQ,EAAEQ,eAJZ;AAKE,kBAAW,gBALb;AAME,IAAA,SAAS,EAAET,OAAO,CAAClB,MANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGyB,aAAa,CAACW,mBAAd,CAAkCE,GAAlC,CAAuCC,IAAD,iBACrC,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,IAArB;AAA2B,kBAAW,cAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,CADD,CARH,CAfF,CAFJ,CAjCF,CADF;AAsED,CAnGD;;AAqGA3B,OAAO,CAAC4B,SAAR,GAAoB;AAClB1B,EAAAA,SAAS,EAAEtC,SAAS,CAACiE,MADH;AAElB1B,EAAAA,QAAQ,EAAEvC,SAAS,CAACkE;AAFF,CAApB;AAKA,eAAe9B,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport { Button } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport UpdateStockModal from \"./UpdateStockModal\";\nimport NewCompentModal from \"./NewCompentModal\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  row: {\n    height: \"42px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    marginTop: theme.spacing(1),\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  importButton: {\n    marginRight: theme.spacing(1),\n  },\n  exportButton: {\n    marginRight: theme.spacing(1),\n  },\n  searchInput: {\n    marginRight: theme.spacing(1),\n  },\n  center: {\n    marginTop: 10,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n}));\n\nconst StyledToggleButtonGroup = withStyles((theme) => ({\n  grouped: {\n    margin: theme.spacing(1),\n    border: \"none\",\n    background: theme.palette.background.default,\n    padding: theme.spacing(0, 3),\n    \"&:not(:first-child)\": {\n      borderRadius: theme.shape.borderRadius,\n    },\n    \"&:first-child\": {\n      borderRadius: theme.shape.borderRadius,\n    },\n  },\n}))(ToggleButtonGroup);\n\nconst Toolbar = (props) => {\n  const { className, onChange, users, ...rest } = props;\n\n  const classes = useStyles();\n  const [component, setComponent] = useState(\"resistor\");\n  const [openUpdateModal, setOpenUpdateModal] = useState(false);\n  const [openNewModal, setOpenNewModal] = useState(false);\n  const [componentInfo, setComponentInfo] = useState({});\n\n  const handleComponent = (event, newComponent) => {\n    setComponent(newComponent);\n    onChange(newComponent);\n  };\n\n  const handleClickUpdate = (event) => {\n    setOpenUpdateModal(true);\n  };\n\n  const handleClickNewComponent = (event) => {\n    setOpenNewModal(true);\n  };\n\n  useEffect(() => {\n    if (users !== undefined) {\n      console.log(\"component toolbar\", users);\n      setComponentInfo(users);\n    }\n  }, [users]);\n\n  return (\n    <div {...rest} className={clsx(classes.root, className)}>\n      <UpdateStockModal\n        composent={componentInfo}\n        onClose={(color) => {\n          setOpenUpdateModal(false);\n        }}\n        open={openUpdateModal}\n      />\n      <NewCompentModal\n        composent={componentInfo}\n        onClose={(color) => {\n          setOpenNewModal(false);\n        }}\n        open={openNewModal}\n      />\n      <div className={classes.row}>\n        <span className={classes.spacer} />\n        <Button\n          color=\"primary\"\n          variant=\"outlined\"\n          onClick={handleClickNewComponent}\n          className={classes.importButton}\n        >\n          Nouveau Composant\n        </Button>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          onClick={handleClickUpdate}\n        >\n          Mise à jour du Stock\n        </Button>\n      </div>\n      <div className={classes.center}>\n        {componentInfo.componentsAvailable !== undefined && (\n          <>\n            <StyledToggleButtonGroup\n              size=\"small\"\n              value={component}\n              exclusive\n              onChange={handleComponent}\n              aria-label=\"text alignment\"\n              className={classes.center}\n            >\n              {componentInfo.componentsAvailable.slice(5).map((user) => (\n                <ToggleButton value={user} aria-label=\"left aligned\">\n                  {user}\n                </ToggleButton>\n              ))}\n            </StyledToggleButtonGroup>\n            <StyledToggleButtonGroup\n              size=\"small\"\n              value={component}\n              exclusive\n              onChange={handleComponent}\n              aria-label=\"text alignment\"\n              className={classes.center}\n            >\n              {componentInfo.componentsAvailable.map((user) => (\n                <ToggleButton value={user} aria-label=\"left aligned\">\n                  {user}\n                </ToggleButton>\n              ))}\n            </StyledToggleButtonGroup>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nToolbar.propTypes = {\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Toolbar;\n"]},"metadata":{},"sourceType":"module"}