{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hookpedals/src/views/Stock/components/AddElements/NewElementModal.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Modal, Card, CardHeader, CardContent, CardActions, Grid, Divider, Typography, TextField, Switch, Button, FormControl, Select, FormControlLabel } from \"@material-ui/core\";\nimport CloseRounded from \"@material-ui/icons/CloseRounded\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport { saveNewTypeInDataBase, saveNewValueInDataBase, saveNewSousTypeInDataBase } from \"../../../../request/stockAPI\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    outline: \"none\",\n    boxShadow: theme.shadows[20],\n    width: 700,\n    maxHeight: \"100%\",\n    overflowY: \"auto\",\n    maxWidth: \"100%\"\n  },\n  actions: {\n    justifyContent: \"flex-end\"\n  },\n  toggleButton: {\n    height: \"100%\"\n  },\n  div: {\n    display: \"flex\"\n  },\n  center: {\n    marginBottom: 20\n  },\n  containerBottom: {\n    marginTop: 20\n  }\n}));\n\nfunction NewElementModal({\n  open,\n  onClose,\n  composent,\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  const [values, setValues] = useState({});\n  const [nameElement, setNameElement] = useState(\"\");\n\n  const handleChange = event => {\n    event.persist();\n    setNameElement(event.target.value);\n  };\n\n  const saveNewValues = () => {\n    let index = 0;\n\n    if (values.Stype !== undefined) {\n      index = composent.componentsStock[values.type][values.Stype].length;\n    }\n\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock\n    };\n    saveNewValueInDataBase(values.type, values.Stype, scheme, index);\n  };\n\n  const saveNewType = () => {\n    let index = composent.componentsAvailable.length;\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock\n    };\n    saveNewTypeInDataBase(values.newType, scheme, index);\n  };\n\n  const saveNewSousType = () => {\n    let index = composent.componentsStock[values.type].typeAvailable.length;\n    let newSousTypeValue = values.newType;\n    if (values.newSType !== undefined) newSousTypeValue = values.newSType;\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock\n    };\n    saveNewSousTypeInDataBase(values.type, newSousTypeValue, scheme, index);\n  };\n\n  const cancelClose = () => {\n    onClose();\n  };\n\n  const saveClose = () => {\n    console.log(\"schema\", values);\n    if (values.type === \"newType\") saveNewType();\n    if (values.type !== \"newType\" && values.Stype === \"newSType\") saveNewSousType();\n    if (values.type !== \"newType\" && values.Stype !== \"newSType\") saveNewValues();\n    setValues({});\n    onClose();\n  };\n\n  if (!open) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    onClose: onClose,\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: \"Nouveau \\xE9l\\xE9ment\",\n    action: /*#__PURE__*/React.createElement(Button, {\n      onClick: cancelClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CloseRounded, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Nom\",\n    onChange: handleChange,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardActions, {\n    className: classes.actions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: saveClose,\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, \"Ajouter\")))));\n}\n\nNewElementModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\nNewElementModal.defaultProps = {\n  open: false,\n  onClose: () => {}\n};\nexport default NewElementModal;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hookpedals/src/views/Stock/components/AddElements/NewElementModal.js"],"names":["React","useState","useEffect","PropTypes","clsx","makeStyles","Modal","Card","CardHeader","CardContent","CardActions","Grid","Divider","Typography","TextField","Switch","Button","FormControl","Select","FormControlLabel","CloseRounded","ToggleButton","ToggleButtonGroup","saveNewTypeInDataBase","saveNewValueInDataBase","saveNewSousTypeInDataBase","useStyles","theme","root","position","top","left","transform","outline","boxShadow","shadows","width","maxHeight","overflowY","maxWidth","actions","justifyContent","toggleButton","height","div","display","center","marginBottom","containerBottom","marginTop","NewElementModal","open","onClose","composent","className","rest","classes","values","setValues","nameElement","setNameElement","handleChange","event","persist","target","value","saveNewValues","index","Stype","undefined","componentsStock","type","length","scheme","label","stock","saveNewType","componentsAvailable","newType","saveNewSousType","typeAvailable","newSousTypeValue","newSType","cancelClose","saveClose","console","log","propTypes","string","customer","any","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport {\n  Modal,\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Grid,\n  Divider,\n  Typography,\n  TextField,\n  Switch,\n  Button,\n  FormControl,\n  Select,\n  FormControlLabel,\n} from \"@material-ui/core\";\nimport CloseRounded from \"@material-ui/icons/CloseRounded\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport {\n  saveNewTypeInDataBase,\n  saveNewValueInDataBase,\n  saveNewSousTypeInDataBase,\n} from \"../../../../request/stockAPI\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    outline: \"none\",\n    boxShadow: theme.shadows[20],\n    width: 700,\n    maxHeight: \"100%\",\n    overflowY: \"auto\",\n    maxWidth: \"100%\",\n  },\n  actions: {\n    justifyContent: \"flex-end\",\n  },\n  toggleButton: {\n    height: \"100%\",\n  },\n  div: {\n    display: \"flex\",\n  },\n  center: {\n    marginBottom: 20,\n  },\n  containerBottom: {\n    marginTop: 20,\n  },\n}));\n\nfunction NewElementModal({ open, onClose, composent, className, ...rest }) {\n  const classes = useStyles();\n  const [values, setValues] = useState({});\n  const [nameElement, setNameElement] = useState(\"\");\n\n  const handleChange = (event) => {\n    event.persist();\n    setNameElement(event.target.value)\n  };\n\n  const saveNewValues = () => {\n    let index = 0;\n    if (values.Stype !== undefined) {\n      index = composent.componentsStock[values.type][values.Stype].length;\n    }\n\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock,\n    };\n    saveNewValueInDataBase(values.type, values.Stype, scheme, index);\n  };\n\n  const saveNewType = () => {\n    let index = composent.componentsAvailable.length;\n\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock,\n    };\n    saveNewTypeInDataBase(values.newType, scheme, index);\n  };\n\n  const saveNewSousType = () => {\n    let index = composent.componentsStock[values.type].typeAvailable.length;\n\n    let newSousTypeValue = values.newType;\n    if (values.newSType !== undefined) newSousTypeValue = values.newSType;\n\n    const scheme = {\n      label: values.label,\n      value: values.value,\n      stock: values.stock,\n    };\n    saveNewSousTypeInDataBase(values.type, newSousTypeValue, scheme, index);\n  };\n\n  const cancelClose = () => {\n    onClose();\n  };\n\n  const saveClose = () => {\n    console.log(\"schema\", values);\n\n    if (values.type === \"newType\") saveNewType();\n\n    if (values.type !== \"newType\" && values.Stype === \"newSType\")\n      saveNewSousType();\n\n    if (values.type !== \"newType\" && values.Stype !== \"newSType\")\n      saveNewValues();\n\n    setValues({});\n    onClose();\n  };\n\n  if (!open) {\n    return null;\n  }\n\n  return (\n    <Modal onClose={onClose} open={open}>\n      <Card {...rest} className={clsx(classes.root, className)}>\n        <form>\n          <CardHeader\n            title=\"Nouveau élément\"\n            action={\n              <Button onClick={cancelClose}>\n                <CloseRounded />\n              </Button>\n            }\n          />\n          <Divider />\n          <CardContent>\n            <TextField label=\"Nom\" onChange={handleChange} variant=\"outlined\"/>\n          </CardContent>\n          <Divider />\n          <CardActions className={classes.actions}>\n            <Button color=\"primary\" onClick={saveClose} variant=\"contained\">\n              Ajouter\n            </Button>\n          </CardActions>\n        </form>\n      </Card>\n    </Modal>\n  );\n}\n\nNewElementModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n};\n\nNewElementModal.defaultProps = {\n  open: false,\n  onClose: () => {},\n};\n\nexport default NewElementModal;\n"]},"metadata":{},"sourceType":"module"}