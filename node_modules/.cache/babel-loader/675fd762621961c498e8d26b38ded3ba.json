{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hookpedals/src/views/ProductList/components/InformationsPedalModal.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport { Modal, Card, CardHeader, CardContent, Divider, Button, TableRow, Grid, colors, IconButton, Table, TableCell, TableBody } from \"@material-ui/core\";\nimport LensRounded from '@material-ui/icons/LensRounded';\nimport CloseRounded from \"@material-ui/icons/CloseRounded\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    outline: \"none\",\n    boxShadow: theme.shadows[20],\n    width: \"40%\",\n    maxHeight: \"90%\",\n    overflowY: \"auto\",\n    maxWidth: \"100%\"\n  },\n  actions: {\n    justifyContent: \"flex-end\"\n  },\n  center: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  divider: {\n    margin: 10\n  },\n  buttonClose: {\n    backgroundColor: colors.red[500],\n    color: colors.grey[50]\n  },\n  buttonModify: {\n    backgroundColor: colors.blue[500],\n    color: colors.grey[50],\n    marginRight: 5\n  }\n}));\n\nfunction InformationsPedalModal({\n  open,\n  onClose,\n  productData,\n  components,\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n\n  function componentAvailable(component) {\n    const splitPathCompo = component.path.split('/');\n    const valueCurrent = components.componentsStock[splitPathCompo[0]][splitPathCompo[1]];\n    const index = valueCurrent.findIndex(p => p.value == splitPathCompo[2]);\n    const stockComponents = valueCurrent[index].stock;\n    return parseInt(stockComponents) > parseInt(component.quantity);\n  }\n\n  const cancelClose = () => {\n    onClose(false);\n  };\n\n  const modifyClose = () => {\n    onClose(true);\n  };\n\n  if (!open) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: `Informations pÃ©dale : ${productData.title}`,\n    action: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      onClick: modifyClose,\n      className: classes.buttonModify,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, \"Modifier\"), /*#__PURE__*/React.createElement(IconButton, {\n      onClick: cancelClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CloseRounded, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    container: true,\n    spacing: 3,\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, Object.keys(productData.components).map((component, i) => /*#__PURE__*/React.createElement(React.Fragment, null, (productData.components[component].quantity !== \"0\" || productData.components[component].quantity !== \"\") && /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, productData.components[component].path), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 25\n    }\n  }, productData.components[component].label), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 25\n    }\n  }, productData.components[component].quantity), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 25\n    }\n  }, !componentAvailable(productData.components[component]) ? /*#__PURE__*/React.createElement(LensRounded, {\n    style: {\n      color: \"#ef9a9a\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 85\n    }\n  }) : null))))))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }))));\n}\n\nInformationsPedalModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\nInformationsPedalModal.defaultProps = {\n  open: false,\n  onClose: () => {}\n};\nexport default InformationsPedalModal;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hookpedals/src/views/ProductList/components/InformationsPedalModal.js"],"names":["React","useState","useEffect","PropTypes","clsx","makeStyles","withStyles","Modal","Card","CardHeader","CardContent","Divider","Button","TableRow","Grid","colors","IconButton","Table","TableCell","TableBody","LensRounded","CloseRounded","useStyles","theme","root","position","top","left","transform","outline","boxShadow","shadows","width","maxHeight","overflowY","maxWidth","actions","justifyContent","center","display","alignItems","divider","margin","buttonClose","backgroundColor","red","color","grey","buttonModify","blue","marginRight","InformationsPedalModal","open","onClose","productData","components","className","rest","classes","componentAvailable","component","splitPathCompo","path","split","valueCurrent","componentsStock","index","findIndex","p","value","stockComponents","stock","parseInt","quantity","cancelClose","modifyClose","title","container","Object","keys","map","i","label","propTypes","string","customer","any","func","bool","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,qBAAvC;AACA,SACEC,KADF,EAEEC,IAFF,EAGEC,UAHF,EAIEC,WAJF,EAKEC,OALF,EAMEC,MANF,EAOEC,QAPF,EAQEC,IARF,EASEC,MATF,EAUEC,UAVF,EAWEC,KAXF,EAYEC,SAZF,EAaEC,SAbF,QAcO,mBAdP;AAeA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AAEA,MAAMC,SAAS,GAAGjB,UAAU,CAAEkB,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,UADN;AAEJC,IAAAA,GAAG,EAAE,KAFD;AAGJC,IAAAA,IAAI,EAAE,KAHF;AAIJC,IAAAA,SAAS,EAAE,uBAJP;AAKJC,IAAAA,OAAO,EAAE,MALL;AAMJC,IAAAA,SAAS,EAAEP,KAAK,CAACQ,OAAN,CAAc,EAAd,CANP;AAOJC,IAAAA,KAAK,EAAE,KAPH;AAQJC,IAAAA,SAAS,EAAE,KARP;AASJC,IAAAA,SAAS,EAAE,MATP;AAUJC,IAAAA,QAAQ,EAAE;AAVN,GADiC;AAavCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,cAAc,EAAE;AADT,GAb8B;AAgBvCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE,MADH;AAENF,IAAAA,cAAc,EAAE,QAFV;AAGNG,IAAAA,UAAU,EAAE;AAHN,GAhB+B;AAqBvCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAE;AADD,GArB8B;AAwBvCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,eAAe,EAAE7B,MAAM,CAAC8B,GAAP,CAAW,GAAX,CADN;AAEXC,IAAAA,KAAK,EAAE/B,MAAM,CAACgC,IAAP,CAAY,EAAZ;AAFI,GAxB0B;AA4BvCC,EAAAA,YAAY,EAAE;AACZJ,IAAAA,eAAe,EAAE7B,MAAM,CAACkC,IAAP,CAAY,GAAZ,CADL;AAEZH,IAAAA,KAAK,EAAE/B,MAAM,CAACgC,IAAP,CAAY,EAAZ,CAFK;AAGZG,IAAAA,WAAW,EAAE;AAHD;AA5ByB,CAAZ,CAAD,CAA5B;;AAmCA,SAASC,sBAAT,CAAgC;AAC9BC,EAAAA,IAD8B;AAE9BC,EAAAA,OAF8B;AAG9BC,EAAAA,WAH8B;AAI9BC,EAAAA,UAJ8B;AAK9BC,EAAAA,SAL8B;AAM9B,KAAGC;AAN2B,CAAhC,EAOG;AACD,QAAMC,OAAO,GAAGpC,SAAS,EAAzB;;AAEA,WAASqC,kBAAT,CAA4BC,SAA5B,EAAuC;AAErC,UAAMC,cAAc,GAAGD,SAAS,CAACE,IAAV,CAAeC,KAAf,CAAqB,GAArB,CAAvB;AAEA,UAAMC,YAAY,GAChBT,UAAU,CAACU,eAAX,CAA2BJ,cAAc,CAAC,CAAD,CAAzC,EAA8CA,cAAc,CAAC,CAAD,CAA5D,CADF;AAEA,UAAMK,KAAK,GAAGF,YAAY,CAACG,SAAb,CAAuBC,CAAC,IAAIA,CAAC,CAACC,KAAF,IAAWR,cAAc,CAAC,CAAD,CAArD,CAAd;AAEA,UAAMS,eAAe,GAAGN,YAAY,CAACE,KAAD,CAAZ,CAAoBK,KAA5C;AAEA,WAAOC,QAAQ,CAACF,eAAD,CAAR,GAA4BE,QAAQ,CAACZ,SAAS,CAACa,QAAX,CAA3C;AACD;;AAED,QAAMC,WAAW,GAAG,MAAM;AACxBrB,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,QAAMsB,WAAW,GAAG,MAAM;AACxBtB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIA,MAAI,CAACD,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEA,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,oBAAUK,IAAV;AAAgB,IAAA,SAAS,EAAErD,IAAI,CAACsD,OAAO,CAAClC,IAAT,EAAegC,SAAf,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAG,yBAAwBF,WAAW,CAACsB,KAAM,EADpD;AAEE,IAAA,MAAM,eACJ,uDACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAED,WAAjB;AAA8B,MAAA,SAAS,EAAEjB,OAAO,CAACV,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE0B,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAcE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,eAeE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,SAAS,MAAhB;AAAiB,IAAA,OAAO,EAAE,CAA1B;AAA6B,IAAA,SAAS,EAAEhB,OAAO,CAACmB,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,MAAM,CAACC,IAAP,CAAYzB,WAAW,CAACC,UAAxB,EAAoCyB,GAApC,CAAwC,CAACpB,SAAD,EAAYqB,CAAZ,kBACvC,0CACG,CAAC3B,WAAW,CAACC,UAAZ,CAAuBK,SAAvB,EAAkCa,QAAlC,KAA+C,GAA/C,IACAnB,WAAW,CAACC,UAAZ,CAAuBK,SAAvB,EAAkCa,QAAlC,KAA+C,EADhD,kBAEC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGnB,WAAW,CAACC,UAAZ,CAAuBK,SAAvB,EAAkCE,IADrC,CADF,eAIE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,WAAW,CAACC,UAAZ,CAAuBK,SAAvB,EAAkCsB,KADrC,CAJF,eAOE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG5B,WAAW,CAACC,UAAZ,CAAuBK,SAAvB,EAAkCa,QADrC,CAPF,eAUE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACd,kBAAkB,CAACL,WAAW,CAACC,UAAZ,CAAuBK,SAAvB,CAAD,CAAnB,gBAAyD,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE;AAACd,MAAAA,KAAK,EAAG;AAAT,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzD,GAAsG,IADzG,CAVF,CAHJ,CADD,CADH,CADF,CADF,CAfF,eA0CE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1CF,CADF,CADF,CADF;AAkDD;;AAEDK,sBAAsB,CAACgC,SAAvB,GAAmC;AACjC3B,EAAAA,SAAS,EAAErD,SAAS,CAACiF,MADY;AAEjCC,EAAAA,QAAQ,EAAElF,SAAS,CAACmF,GAFa;AAGjCjC,EAAAA,OAAO,EAAElD,SAAS,CAACoF,IAHc;AAIjCnC,EAAAA,IAAI,EAAEjD,SAAS,CAACqF;AAJiB,CAAnC;AAOArC,sBAAsB,CAACsC,YAAvB,GAAsC;AACpCrC,EAAAA,IAAI,EAAE,KAD8B;AAEpCC,EAAAA,OAAO,EAAE,MAAM,CAAE;AAFmB,CAAtC;AAKA,eAAeF,sBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport {\n  Modal,\n  Card,\n  CardHeader,\n  CardContent,\n  Divider,\n  Button,\n  TableRow,\n  Grid,\n  colors,\n  IconButton,\n  Table,\n  TableCell,\n  TableBody,\n} from \"@material-ui/core\";\nimport LensRounded from '@material-ui/icons/LensRounded'\nimport CloseRounded from \"@material-ui/icons/CloseRounded\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    outline: \"none\",\n    boxShadow: theme.shadows[20],\n    width: \"40%\",\n    maxHeight: \"90%\",\n    overflowY: \"auto\",\n    maxWidth: \"100%\",\n  },\n  actions: {\n    justifyContent: \"flex-end\",\n  },\n  center: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  divider: {\n    margin: 10,\n  },\n  buttonClose: {\n    backgroundColor: colors.red[500],\n    color: colors.grey[50],\n  },\n  buttonModify: {\n    backgroundColor: colors.blue[500],\n    color: colors.grey[50],\n    marginRight: 5,\n  },\n}));\n\nfunction InformationsPedalModal({\n  open,\n  onClose,\n  productData,\n  components,\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n\n  function componentAvailable(component) {\n\n    const splitPathCompo = component.path.split('/');\n    \n    const valueCurrent =\n      components.componentsStock[splitPathCompo[0]][splitPathCompo[1]];\n    const index = valueCurrent.findIndex(p => p.value == splitPathCompo[2]);\n\n    const stockComponents = valueCurrent[index].stock;\n   \n    return parseInt(stockComponents) > parseInt(component.quantity);\n  }\n\n  const cancelClose = () => {\n    onClose(false);\n  };\n\n  const modifyClose = () => {\n    onClose(true);\n  };\n\n  if (!open) {\n    return null;\n  }\n\n  return (\n    <Modal open={open}>\n      <Card {...rest} className={clsx(classes.root, className)}>\n        <form>\n          <CardHeader\n            title={`Informations pÃ©dale : ${productData.title}`}\n            action={\n              <>\n                <Button onClick={modifyClose} className={classes.buttonModify}>\n                  Modifier\n                </Button>\n                <IconButton onClick={cancelClose}>\n                  <CloseRounded />\n                </IconButton>\n              </>\n            }\n          />\n          <Divider />\n          <CardContent>\n            <Table container spacing={3} className={classes.container}>\n              <TableBody>\n                {Object.keys(productData.components).map((component, i) => (\n                  <>\n                    {(productData.components[component].quantity !== \"0\" ||\n                      productData.components[component].quantity !== \"\") && (\n                      <TableRow>\n                        <TableCell>\n                          {productData.components[component].path}\n                        </TableCell>\n                        <TableCell>\n                          {productData.components[component].label}\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          {productData.components[component].quantity}\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          {!componentAvailable(productData.components[component]) ? <LensRounded style={{color : \"#ef9a9a\"}}/> : null}\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n          <Divider />\n        </form>\n      </Card>\n    </Modal>\n  );\n}\n\nInformationsPedalModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n};\n\nInformationsPedalModal.defaultProps = {\n  open: false,\n  onClose: () => {},\n};\n\nexport default InformationsPedalModal;\n"]},"metadata":{},"sourceType":"module"}