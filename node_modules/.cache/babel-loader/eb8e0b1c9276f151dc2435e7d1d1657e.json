{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hookpedals/src/views/Stock/components/Toolbar.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport { Button, Grid, colors, Divider } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport UpdateStockModal from \"./UpdateStockModal\";\nimport NewCompentModal from \"./NewCompentModal\";\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  row: {\n    height: \"42px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    marginTop: theme.spacing(1)\n  },\n  spacer: {\n    flexGrow: 1\n  },\n  importButton: {\n    marginRight: theme.spacing(1)\n  },\n  exportButton: {\n    marginRight: theme.spacing(1)\n  },\n  searchInput: {\n    marginRight: theme.spacing(1)\n  },\n  center: {\n    marginTop: 10,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n}));\nconst StyledToggleButtonGroup = withStyles(theme => ({\n  grouped: {\n    margin: theme.spacing(1),\n    border: \"none\",\n    background: theme.palette.white,\n    padding: theme.spacing(0, 3),\n    \"&:not(:first-child)\": {\n      borderRadius: theme.shape.borderRadius\n    },\n    \"&:first-child\": {\n      borderRadius: theme.shape.borderRadius\n    }\n  },\n  root: {\n    backgroundColor: theme.palette.background.default\n  }\n}))(ToggleButtonGroup);\n\nconst Toolbar = props => {\n  const {\n    className,\n    onChange,\n    users,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const [component, setComponent] = useState(\"resistor\");\n  const [openUpdateModal, setOpenUpdateModal] = useState(false);\n  const [openNewModal, setOpenNewModal] = useState(false);\n  const [componentInfo, setComponentInfo] = useState({});\n\n  const handleClickNewComponent = event => {\n    setOpenNewModal(true);\n  };\n\n  const handleComponent = (event, newComponent) => {\n    if (newComponent === \"new\") {\n      handleClickNewComponent();\n      return;\n    }\n\n    setComponent(newComponent);\n    onChange(newComponent);\n  };\n\n  useEffect(() => {\n    if (users !== undefined) {\n      console.log(\"component toolbar\", users);\n      setComponentInfo(users);\n    }\n  }, [users]);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(UpdateStockModal, {\n    composent: componentInfo,\n    onClose: color => {\n      setOpenUpdateModal(false);\n    },\n    open: openUpdateModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(NewCompentModal, {\n    composent: componentInfo,\n    onClose: color => {\n      setOpenNewModal(false);\n    },\n    open: openNewModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), componentInfo.componentsAvailable !== undefined && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledToggleButtonGroup, {\n    size: \"small\",\n    value: component,\n    exclusive: true,\n    onChange: handleComponent,\n    \"aria-label\": \"text alignment\",\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, componentInfo.componentsAvailable.sort().slice(0, 8).map(user => /*#__PURE__*/React.createElement(ToggleButton, {\n    value: user,\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, user))), /*#__PURE__*/React.createElement(StyledToggleButtonGroup, {\n    size: \"small\",\n    value: component,\n    exclusive: true,\n    onChange: handleComponent,\n    \"aria-label\": \"text alignment\",\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, componentInfo.componentsAvailable.slice(8).map(user => /*#__PURE__*/React.createElement(ToggleButton, {\n    value: user,\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }, user)), /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"new\",\n    \"aria-label\": \"left aligned\",\n    style: {\n      backgroundColor: colors.blue[700],\n      color: colors.grey[50]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, \"+\"))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.spacer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  })));\n};\n\nToolbar.propTypes = {\n  className: PropTypes.string,\n  onChange: PropTypes.func\n};\nexport default Toolbar;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hookpedals/src/views/Stock/components/Toolbar.js"],"names":["React","useState","useEffect","PropTypes","clsx","makeStyles","withStyles","Button","Grid","colors","Divider","ToggleButton","ToggleButtonGroup","UpdateStockModal","NewCompentModal","useStyles","theme","root","row","height","display","alignItems","marginTop","spacing","spacer","flexGrow","importButton","marginRight","exportButton","searchInput","center","justifyContent","StyledToggleButtonGroup","grouped","margin","border","background","palette","white","padding","borderRadius","shape","backgroundColor","default","Toolbar","props","className","onChange","users","rest","classes","component","setComponent","openUpdateModal","setOpenUpdateModal","openNewModal","setOpenNewModal","componentInfo","setComponentInfo","handleClickNewComponent","event","handleComponent","newComponent","undefined","console","log","color","componentsAvailable","sort","slice","map","user","blue","grey","propTypes","string","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport { Button, Grid, colors, Divider } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport UpdateStockModal from \"./UpdateStockModal\";\nimport NewCompentModal from \"./NewCompentModal\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  row: {\n    height: \"42px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    marginTop: theme.spacing(1),\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  importButton: {\n    marginRight: theme.spacing(1),\n  },\n  exportButton: {\n    marginRight: theme.spacing(1),\n  },\n  searchInput: {\n    marginRight: theme.spacing(1),\n  },\n  center: {\n    marginTop: 10,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n}));\n\nconst StyledToggleButtonGroup = withStyles((theme) => ({\n  grouped: {\n    margin: theme.spacing(1),\n    border: \"none\",\n    background: theme.palette.white,\n    padding: theme.spacing(0, 3),\n    \"&:not(:first-child)\": {\n      borderRadius: theme.shape.borderRadius,\n    },\n    \"&:first-child\": {\n      borderRadius: theme.shape.borderRadius,\n    },\n  },\n  root: {\n    backgroundColor: theme.palette.background.default,\n  },\n}))(ToggleButtonGroup);\n\nconst Toolbar = (props) => {\n  const { className, onChange, users, ...rest } = props;\n\n  const classes = useStyles();\n  const [component, setComponent] = useState(\"resistor\");\n  const [openUpdateModal, setOpenUpdateModal] = useState(false);\n  const [openNewModal, setOpenNewModal] = useState(false);\n  const [componentInfo, setComponentInfo] = useState({});\n\n  const handleClickNewComponent = (event) => {\n    setOpenNewModal(true);\n  };\n\n  const handleComponent = (event, newComponent) => {\n    if (newComponent === \"new\") {\n      handleClickNewComponent();\n      return;\n    }\n    setComponent(newComponent);\n    onChange(newComponent);\n  };\n\n  useEffect(() => {\n    if (users !== undefined) {\n      console.log(\"component toolbar\", users);\n      setComponentInfo(users);\n    }\n  }, [users]);\n\n  return (\n    <div {...rest} className={clsx(classes.root, className)}>\n      <UpdateStockModal\n        composent={componentInfo}\n        onClose={(color) => {\n          setOpenUpdateModal(false);\n        }}\n        open={openUpdateModal}\n      />\n      <NewCompentModal\n        composent={componentInfo}\n        onClose={(color) => {\n          setOpenNewModal(false);\n        }}\n        open={openNewModal}\n      />\n\n      {componentInfo.componentsAvailable !== undefined && (\n        <div>\n          <StyledToggleButtonGroup\n            size=\"small\"\n            value={component}\n            exclusive\n            onChange={handleComponent}\n            aria-label=\"text alignment\"\n            className={classes.center}\n          >\n            {componentInfo.componentsAvailable\n              .sort()\n              .slice(0, 8)\n              .map((user) => (\n                <ToggleButton value={user} aria-label=\"left aligned\">\n                  {user}\n                </ToggleButton>\n              ))}\n          </StyledToggleButtonGroup>\n          <StyledToggleButtonGroup\n            size=\"small\"\n            value={component}\n            exclusive\n            onChange={handleComponent}\n            aria-label=\"text alignment\"\n            className={classes.center}\n          >\n            {componentInfo.componentsAvailable.slice(8).map((user) => (\n              <ToggleButton value={user} aria-label=\"left aligned\">\n                {user}\n              </ToggleButton>\n            ))}\n            <ToggleButton\n              value=\"new\"\n              aria-label=\"left aligned\"\n              style={{\n                backgroundColor: colors.blue[700],\n                color: colors.grey[50],\n              }}\n            >\n              +\n            </ToggleButton>\n          </StyledToggleButtonGroup>\n        </div>\n      )}\n      <Divider />\n      <div className={classes.row}>\n        <span className={classes.spacer} />\n      </div>\n    </div>\n  );\n};\n\nToolbar.propTypes = {\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Toolbar;\n"]},"metadata":{},"sourceType":"module"}