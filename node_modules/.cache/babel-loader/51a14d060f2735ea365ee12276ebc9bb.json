{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hookpedals/src/views/UserList/components/TableGenerator.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, TableContainer, CardHeader, Grid } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  row: {\n    height: '42px',\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: theme.spacing(1)\n  },\n  spacer: {\n    flexGrow: 1\n  },\n  importButton: {\n    marginRight: theme.spacing(1)\n  },\n  exportButton: {\n    marginRight: theme.spacing(1)\n  },\n  searchInput: {\n    marginRight: theme.spacing(1)\n  },\n  container: {\n    maxHeight: 740\n  },\n  headerTitle: {\n    paddingBottom: 0,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n}));\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.background.default\n    }\n  }\n}))(TableRow);\n\nconst TableGenerator = props => {\n  const {\n    className,\n    listTable,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const [componentInfo, setComponentInfo] = useState({});\n\n  function compareNombres(a, b) {\n    console.log(\"A\", a);\n    console.log(\"B\", b);\n    const valuesA = a.label.split(\" \");\n    const valuesB = b.label.split(\" \");\n    return valuesA[1] - valuesB[1];\n  }\n\n  useEffect(() => {\n    console.log('component tableGE', listTable);\n\n    if (listTable !== undefined) {\n      const index = Object.keys(listTable).findIndex(p => p.attr1 == 'typeAvailable');\n      Object.keys(listTable).slice(index);\n      setComponentInfo(listTable);\n    }\n  }, [listTable]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, Object.keys(componentInfo).map((keyName, i) => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12 / Object.keys(componentInfo).length + 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, keyName !== 'typeAvailable' && /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), keyName !== 'values' && /*#__PURE__*/React.createElement(CardHeader, {\n    title: keyName,\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }, \"Valeur\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, \"Stock\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, Object.values(componentInfo[keyName]).sort(compareNombres).map(user => /*#__PURE__*/React.createElement(StyledTableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(StyledTableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 27\n    }\n  }, user.label), /*#__PURE__*/React.createElement(StyledTableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 27\n    }\n  }, user.stock)))))))))));\n};\n\nTableGenerator.propTypes = {\n  className: PropTypes.string,\n  listTable: PropTypes.object\n};\nexport default TableGenerator;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hookpedals/src/views/UserList/components/TableGenerator.js"],"names":["React","useEffect","useState","PropTypes","clsx","makeStyles","withStyles","Card","CardActions","CardContent","Avatar","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","TableContainer","CardHeader","Grid","useStyles","theme","root","row","height","display","alignItems","marginTop","spacing","spacer","flexGrow","importButton","marginRight","exportButton","searchInput","container","maxHeight","headerTitle","paddingBottom","justifyContent","StyledTableCell","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","background","default","TableGenerator","props","className","listTable","rest","classes","componentInfo","setComponentInfo","compareNombres","a","b","console","log","valuesA","label","split","valuesB","undefined","index","Object","keys","findIndex","p","attr1","slice","map","keyName","i","length","textAlign","content","values","sort","user","stock","propTypes","string","object"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  Avatar,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableContainer,\n  CardHeader,\n  Grid\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  row: {\n    height: '42px',\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: theme.spacing(1)\n  },\n  spacer: {\n    flexGrow: 1\n  },\n  importButton: {\n    marginRight: theme.spacing(1)\n  },\n  exportButton: {\n    marginRight: theme.spacing(1)\n  },\n  searchInput: {\n    marginRight: theme.spacing(1)\n  },\n  container: {\n    maxHeight: 740\n  },\n  headerTitle: {\n    paddingBottom: 0,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n}));\n\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.background.default\n    }\n  }\n}))(TableRow);\n\nconst TableGenerator = props => {\n  const { className, listTable, ...rest } = props;\n\n  const classes = useStyles();\n  const [componentInfo, setComponentInfo] = useState({});\n\n  function compareNombres(a, b) {\n    console.log(\"A\", a)\n    console.log(\"B\", b)\n   const valuesA = a.label.split(\" \"); \n   const valuesB = b.label.split(\" \");\n   \n    return valuesA[1] - valuesB[1];\n  }\n\n  useEffect(() => {\n    console.log('component tableGE', listTable);\n    if (listTable !== undefined) {\n      const index = Object.keys(listTable).findIndex(\n        p => p.attr1 == 'typeAvailable'\n      );\n      Object.keys(listTable).slice(index);\n      setComponentInfo(listTable);\n    }\n  }, [listTable]);\n\n  return (\n    <Grid container spacing={3}>\n      {Object.keys(componentInfo).map((keyName, i) => (\n        <Grid item xs={12 / Object.keys(componentInfo).length + 1}>\n          {keyName !== 'typeAvailable' && (\n            <Card {...rest} className={clsx(classes.root, className)}>\n              {keyName !== 'values' && (\n                <CardHeader title={keyName} style={{ textAlign: 'center' }} />\n              )}\n              <CardContent className={classes.content}>\n                <TableContainer className={classes.container}>\n                  <Table stickyHeader size=\"small\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Valeur</TableCell>\n                        <TableCell>Stock</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {Object.values(componentInfo[keyName]).sort(compareNombres).map(user => (\n                        <StyledTableRow>\n                          <StyledTableCell>{user.label}</StyledTableCell>\n                          <StyledTableCell>{user.stock}</StyledTableCell>\n                        </StyledTableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </CardContent>\n            </Card>\n          )}\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nTableGenerator.propTypes = {\n  className: PropTypes.string,\n  listTable: PropTypes.object\n};\n\nexport default TableGenerator;"]},"metadata":{},"sourceType":"module"}