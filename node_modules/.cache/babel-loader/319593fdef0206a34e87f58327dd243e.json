{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hook-pedal/src/views/ProductList/components/AddPedalModal.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport { Modal, Card, CardHeader, CardContent, CardActions, Grid, Divider, Typography, TextField, MenuItem, Button, FormControl, Select, InputLabel } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport TableSelector from './TableSelector';\nimport { saveNewPedalsInDataBase } from '../../../request/pedalsAPI';\nimport { getStockDataBase } from '../../../request/stockAPI';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    outline: 'none',\n    boxShadow: theme.shadows[20],\n    width: '60%',\n    maxHeight: '90%',\n    overflowY: 'auto',\n    maxWidth: '100%'\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  },\n  center: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  divider: {\n    margin: 10\n  }\n}));\nconst StyledToggleButtonGroup = withStyles(theme => ({\n  grouped: {\n    margin: theme.spacing(1),\n    border: 'none',\n    background: theme.palette.background.default,\n    padding: theme.spacing(0, 3),\n    '&:not(:first-child)': {\n      borderRadius: theme.shape.borderRadius\n    },\n    '&:first-child': {\n      borderRadius: theme.shape.borderRadius\n    }\n  }\n}))(ToggleButtonGroup);\n\nfunction AddPedalModal({\n  open,\n  onClose,\n  className,\n  index,\n  pedalInformations,\n  ...rest\n}) {\n  const classes = useStyles();\n  const [componentCurrent, setComponentCurrent] = useState('resistor');\n  const [componentsList, setComponentsList] = useState([]);\n  const [pedalCurrent, setPedalCurrent] = useState({});\n  const [indexCurrentPedal, setIndexCurrentPedal] = useState(0);\n\n  function saveInDataBase(index, pedalInformationsComplet) {\n    saveNewPedalsInDataBase(index, pedalInformationsComplet);\n  }\n\n  const handleChange = (event, user) => {\n    setPedalCurrent(prevFormState => ({ ...prevFormState,\n      components: { ...prevFormState.components,\n        [user.value]: {\n          label: user.label,\n          quantity: event.target.value >= 0 ? event.target.value : 0\n        }\n      }\n    }));\n  };\n\n  const handleChangeName = event => {\n    event.persist();\n    setPedalCurrent(prevFormState => ({ ...prevFormState,\n      title: event.target.value\n    }));\n  };\n\n  const handleComponent = (event, newComponent) => {\n    setComponentCurrent(newComponent);\n  };\n\n  const cancelClose = () => {\n    onClose();\n  };\n\n  const saveClose = () => {\n    console.log('pedalCurrent', pedalCurrent);\n    if (pedalCurrent.title === undefined || pedalCurrent.title === '') return;\n    const today = new Date();\n    let pedalScheme = { ...pedalCurrent,\n      totalMade: 0,\n      createdAt: today.getDate() + '/' + (today.getMonth() + 1) + '/' + today.getFullYear(),\n      id: indexCurrentPedal\n    };\n\n    if (pedalInformations !== undefined) {\n      pedalScheme = { ...pedalScheme,\n        id: pedalInformations.index\n      };\n      console.log('save scheme', pedalScheme);\n      saveInDataBase(pedalInformations.index, pedalScheme);\n    } else {\n      console.log('save scheme', pedalScheme);\n      saveInDataBase(indexCurrentPedal, pedalScheme);\n    } // snackbar ok enregistrer\n\n\n    onClose();\n  };\n\n  useEffect(() => {\n    if (pedalInformations !== undefined) {\n      console.log('index modal pedal info', pedalInformations);\n      setPedalCurrent(pedalInformations);\n    }\n  }, [pedalInformations]);\n  useEffect(() => {\n    console.log('index modal from new', index);\n    setIndexCurrentPedal(index);\n  }, [index]);\n  useEffect(() => {\n    getStockDataBase(response => {\n      setComponentsList(response);\n    });\n  }, []);\n\n  if (!open) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    onClose: onClose,\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: \"Ajouter une nouvelle p\\xE9dale\",\n    action: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      onClick: cancelClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: saveClose,\n      variant: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }, \"Save\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    label: \"Nom de la p\\xE9dale\",\n    placeholder: \"hello\",\n    name: \"namePedal\",\n    onChange: handleChangeName,\n    value: pedalCurrent.title || '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, \"Stock\"), /*#__PURE__*/React.createElement(Divider, {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(StyledToggleButtonGroup, {\n    size: \"small\",\n    value: componentCurrent,\n    exclusive: true,\n    onChange: handleComponent,\n    \"aria-label\": \"text alignment\",\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, componentsList.componentsAvailable !== undefined && componentsList.componentsAvailable.slice(6, componentsList.componentsAvailable.length).map(user => /*#__PURE__*/React.createElement(ToggleButton, {\n    value: user,\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, user))), /*#__PURE__*/React.createElement(StyledToggleButtonGroup, {\n    size: \"small\",\n    value: componentCurrent,\n    exclusive: true,\n    onChange: handleComponent,\n    \"aria-label\": \"text alignment\",\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }\n  }, componentsList.componentsAvailable !== undefined && componentsList.componentsAvailable.slice(0, 6).map(user => /*#__PURE__*/React.createElement(ToggleButton, {\n    value: user,\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 19\n    }\n  }, user))), /*#__PURE__*/React.createElement(TableSelector, {\n    listTable: componentsList.componentsStock[componentCurrent],\n    componentsExisted: pedalCurrent.components || {},\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }\n  }))));\n}\n\nAddPedalModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\nAddPedalModal.defaultProps = {\n  open: false,\n  onClose: () => {}\n};\nexport default AddPedalModal;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hook-pedal/src/views/ProductList/components/AddPedalModal.js"],"names":["React","useState","useEffect","PropTypes","clsx","makeStyles","withStyles","Modal","Card","CardHeader","CardContent","CardActions","Grid","Divider","Typography","TextField","MenuItem","Button","FormControl","Select","InputLabel","ToggleButton","ToggleButtonGroup","TableSelector","saveNewPedalsInDataBase","getStockDataBase","useStyles","theme","root","position","top","left","transform","outline","boxShadow","shadows","width","maxHeight","overflowY","maxWidth","actions","justifyContent","center","display","alignItems","divider","margin","StyledToggleButtonGroup","grouped","spacing","border","background","palette","default","padding","borderRadius","shape","AddPedalModal","open","onClose","className","index","pedalInformations","rest","classes","componentCurrent","setComponentCurrent","componentsList","setComponentsList","pedalCurrent","setPedalCurrent","indexCurrentPedal","setIndexCurrentPedal","saveInDataBase","pedalInformationsComplet","handleChange","event","user","prevFormState","components","value","label","quantity","target","handleChangeName","persist","title","handleComponent","newComponent","cancelClose","saveClose","console","log","undefined","today","Date","pedalScheme","totalMade","createdAt","getDate","getMonth","getFullYear","id","response","componentsAvailable","slice","length","map","componentsStock","propTypes","string","customer","any","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport {\n  Modal,\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Grid,\n  Divider,\n  Typography,\n  TextField,\n  MenuItem,\n  Button,\n  FormControl,\n  Select,\n  InputLabel\n} from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport TableSelector from './TableSelector';\nimport { saveNewPedalsInDataBase } from '../../../request/pedalsAPI';\nimport { getStockDataBase } from '../../../request/stockAPI';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    outline: 'none',\n    boxShadow: theme.shadows[20],\n    width: '60%',\n    maxHeight: '90%',\n    overflowY: 'auto',\n    maxWidth: '100%'\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  },\n  center: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  divider: {\n    margin: 10\n  }\n}));\n\nconst StyledToggleButtonGroup = withStyles(theme => ({\n  grouped: {\n    margin: theme.spacing(1),\n    border: 'none',\n    background: theme.palette.background.default,\n    padding: theme.spacing(0, 3),\n    '&:not(:first-child)': {\n      borderRadius: theme.shape.borderRadius\n    },\n    '&:first-child': {\n      borderRadius: theme.shape.borderRadius\n    }\n  }\n}))(ToggleButtonGroup);\n\nfunction AddPedalModal({\n  open,\n  onClose,\n  className,\n  index,\n  pedalInformations,\n  ...rest\n}) {\n  const classes = useStyles();\n\n  const [componentCurrent, setComponentCurrent] = useState('resistor');\n  const [componentsList, setComponentsList] = useState([]);\n  const [pedalCurrent, setPedalCurrent] = useState({});\n  const [indexCurrentPedal, setIndexCurrentPedal] = useState(0);\n\n  function saveInDataBase(index, pedalInformationsComplet) {\n    saveNewPedalsInDataBase(index, pedalInformationsComplet);\n  }\n\n  const handleChange = (event, user) => {\n    setPedalCurrent(prevFormState => ({\n      ...prevFormState,\n      components: {\n        ...prevFormState.components,\n        [user.value]: {\n          label: user.label,\n          quantity: event.target.value >= 0 ? event.target.value : 0\n        }\n      }\n    }));\n  };\n\n  const handleChangeName = event => {\n    event.persist();\n    setPedalCurrent(prevFormState => ({\n      ...prevFormState,\n      title: event.target.value\n    }));\n  };\n\n  const handleComponent = (event, newComponent) => {\n    setComponentCurrent(newComponent);\n  };\n\n  const cancelClose = () => {\n    onClose();\n  };\n\n  const saveClose = () => {\n    console.log('pedalCurrent', pedalCurrent);\n    if (pedalCurrent.title === undefined || pedalCurrent.title === '') return;\n    const today = new Date();\n    let pedalScheme = {\n      ...pedalCurrent,\n      totalMade: 0,\n      createdAt:\n        today.getDate() +\n        '/' +\n        (today.getMonth() + 1) +\n        '/' +\n        today.getFullYear(),\n      id: indexCurrentPedal\n    };\n\n    if (pedalInformations !== undefined) {\n      pedalScheme = {\n        ...pedalScheme,\n        id: pedalInformations.index\n      };\n      console.log('save scheme', pedalScheme);\n      saveInDataBase(pedalInformations.index, pedalScheme);\n    } else {\n      console.log('save scheme', pedalScheme);\n      saveInDataBase(indexCurrentPedal, pedalScheme);\n    }\n\n    // snackbar ok enregistrer\n    onClose();\n  };\n\n  useEffect(() => {\n    if (pedalInformations !== undefined) {\n      console.log('index modal pedal info', pedalInformations);\n      setPedalCurrent(pedalInformations);\n    }\n  }, [pedalInformations]);\n\n  useEffect(() => {\n    console.log('index modal from new', index);\n    setIndexCurrentPedal(index);\n  }, [index]);\n\n  useEffect(() => {\n    getStockDataBase(response => {\n      setComponentsList(response);\n    });\n  }, []);\n\n  if (!open) {\n    return null;\n  }\n\n  return (\n    <Modal onClose={onClose} open={open}>\n      <Card {...rest} className={clsx(classes.root, className)}>\n        <form>\n          <CardHeader\n            title=\"Ajouter une nouvelle pédale\"\n            action={\n              <>\n                <Button onClick={cancelClose}>Close</Button>\n                <Button color=\"primary\" onClick={saveClose} variant=\"contained\">\n                  Save\n                </Button>\n              </>\n            }\n          />\n          <Divider />\n          <CardContent>\n            <TextField\n              variant=\"outlined\"\n              size=\"medium\"\n              fullWidth\n              label=\"Nom de la pédale\"\n              placeholder=\"hello\"\n              name=\"namePedal\"\n              onChange={handleChangeName}\n              value={pedalCurrent.title || ''}\n            >\n              Stock\n            </TextField>\n            <Divider className={classes.divider} />\n            <StyledToggleButtonGroup\n              size=\"small\"\n              value={componentCurrent}\n              exclusive\n              onChange={handleComponent}\n              aria-label=\"text alignment\"\n              className={classes.center}\n            >\n              {componentsList.componentsAvailable !== undefined &&\n                componentsList.componentsAvailable\n                  .slice(6, componentsList.componentsAvailable.length)\n                  .map(user => (\n                    <ToggleButton value={user} aria-label=\"left aligned\">\n                      {user}\n                    </ToggleButton>\n                  ))}\n            </StyledToggleButtonGroup>\n            <StyledToggleButtonGroup\n              size=\"small\"\n              value={componentCurrent}\n              exclusive\n              onChange={handleComponent}\n              aria-label=\"text alignment\"\n              className={classes.center}\n            >\n              {componentsList.componentsAvailable !== undefined &&\n                componentsList.componentsAvailable.slice(0, 6).map(user => (\n                  <ToggleButton value={user} aria-label=\"left aligned\">\n                    {user}\n                  </ToggleButton>\n                ))}\n            </StyledToggleButtonGroup>\n            <TableSelector\n              listTable={componentsList.componentsStock[componentCurrent]}\n              componentsExisted={pedalCurrent.components || {}}\n              onChange={handleChange}\n            />\n          </CardContent>\n          <Divider />\n        </form>\n      </Card>\n    </Modal>\n  );\n}\n\nAddPedalModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\n\nAddPedalModal.defaultProps = {\n  open: false,\n  onClose: () => {}\n};\n\nexport default AddPedalModal;\n"]},"metadata":{},"sourceType":"module"}