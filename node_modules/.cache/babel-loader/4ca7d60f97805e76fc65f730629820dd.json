{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hook-pedal/src/views/ProductList/components/TableSelector.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, TextField, Button, Table, TableBody, TableCell, TableHead, TableRow, TableContainer, CardHeader, Grid } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  row: {\n    height: '42px',\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: theme.spacing(1)\n  },\n  spacer: {\n    flexGrow: 1\n  },\n  importButton: {\n    marginRight: theme.spacing(1)\n  },\n  exportButton: {\n    marginRight: theme.spacing(1)\n  },\n  container: {\n    maxHeight: 740\n  },\n  headerTitle: {\n    paddingBottom: 0,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  content: {\n    marginTop: 10\n  }\n}));\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.background.default\n    }\n  }\n}))(TableRow);\n\nconst TableSelector = props => {\n  const {\n    className,\n    listTable,\n    onChange,\n    componentsExisted,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const [componentsInfo, setComponentsInfo] = useState({});\n\n  const handleChange = (event, user) => {\n    console.log('change user', user);\n    console.log('change event', event);\n    onChange(event, user);\n  };\n\n  useEffect(() => {\n    if (componentsExisted !== undefined) {\n      console.log('componentsExisted infos', componentsExisted);\n    }\n  }, [componentsExisted]);\n  useEffect(() => {\n    console.log('component tableGE', listTable);\n\n    if (listTable !== undefined) {\n      const index = Object.keys(listTable).findIndex(p => p.attr1 == 'typeAvailable');\n      Object.keys(listTable).slice(index);\n      setComponentsInfo(listTable);\n    }\n  }, [listTable]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, Object.keys(componentsInfo).map((keyName, i) => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12 / Object.keys(listTable).length + 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, keyName !== 'typeAvailable' && /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }), keyName !== 'values' && /*#__PURE__*/React.createElement(CardHeader, {\n    title: keyName,\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 27\n    }\n  }, \"Valeur\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 27\n    }\n  }, \"Quantit\\xE9\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 23\n    }\n  }, componentsInfo[keyName].map(user => /*#__PURE__*/React.createElement(StyledTableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(StyledTableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 29\n    }\n  }, user.label), /*#__PURE__*/React.createElement(StyledTableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    size: \"small\",\n    name: user.value,\n    onChange: () => handleChange(event, user),\n    value: componentsExisted[user.value] !== undefined ? componentsExisted[user.value].quantity : '',\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 31\n    }\n  }))))))))))));\n};\n\nTableSelector.propTypes = {\n  className: PropTypes.string,\n  listTable: PropTypes.object\n};\nexport default TableSelector;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hook-pedal/src/views/ProductList/components/TableSelector.js"],"names":["React","useEffect","useState","PropTypes","clsx","makeStyles","withStyles","Card","CardActions","CardContent","TextField","Button","Table","TableBody","TableCell","TableHead","TableRow","TableContainer","CardHeader","Grid","ToggleButton","ToggleButtonGroup","useStyles","theme","root","row","height","display","alignItems","marginTop","spacing","spacer","flexGrow","importButton","marginRight","exportButton","container","maxHeight","headerTitle","paddingBottom","justifyContent","content","StyledTableCell","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","background","default","TableSelector","props","className","listTable","onChange","componentsExisted","rest","classes","componentsInfo","setComponentsInfo","handleChange","event","user","console","log","undefined","index","Object","keys","findIndex","p","attr1","slice","map","keyName","i","length","textAlign","label","value","quantity","propTypes","string","object"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles, withStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  TextField,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableContainer,\n  CardHeader,\n  Grid\n} from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  row: {\n    height: '42px',\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: theme.spacing(1)\n  },\n  spacer: {\n    flexGrow: 1\n  },\n  importButton: {\n    marginRight: theme.spacing(1)\n  },\n  exportButton: {\n    marginRight: theme.spacing(1)\n  },\n  container: {\n    maxHeight: 740\n  },\n  headerTitle: {\n    paddingBottom: 0,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  content: {\n    marginTop: 10\n  }\n}));\n\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.background.default\n    }\n  }\n}))(TableRow);\n\nconst TableSelector = props => {\n  const { className, listTable, onChange, componentsExisted, ...rest } = props;\n\n  const classes = useStyles();\n  const [componentsInfo, setComponentsInfo] = useState({});\n  \n  const handleChange = (event, user) => {\n    \n    console.log('change user',user);\n    console.log('change event',event);\n    onChange(event, user);\n  };\n\n  useEffect(() => {\n    if (componentsExisted !== undefined) {\n      console.log('componentsExisted infos', componentsExisted);\n    }\n  }, [componentsExisted]);\n\n  useEffect(() => {\n    console.log('component tableGE', listTable);\n    if (listTable !== undefined) {\n      const index = Object.keys(listTable).findIndex(\n        p => p.attr1 == 'typeAvailable'\n      );\n      Object.keys(listTable).slice(index);\n      setComponentsInfo(listTable);\n    }\n  }, [listTable]);\n\n  return (\n    <Grid container spacing={3} className={classes.content}>\n      {Object.keys(componentsInfo)\n        .map((keyName, i) => (\n          <Grid item xs={12 / Object.keys(listTable).length + 1}>\n            {keyName !== 'typeAvailable' && (\n              <Card {...rest} className={clsx(classes.root, className)}>\n                {keyName !== 'values' && (\n                  <CardHeader title={keyName} style={{ textAlign: 'center' }} />\n                )}\n                <CardContent className={classes.content}>\n                  <TableContainer className={classes.container}>\n                    <Table stickyHeader size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>Valeur</TableCell>\n                          <TableCell>Quantité</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {componentsInfo[keyName].map(user => (\n                          <StyledTableRow>\n                            <StyledTableCell>{user.label}</StyledTableCell>\n                            <StyledTableCell>\n                              <TextField\n                                variant=\"outlined\"\n                                size=\"small\"\n                                name={user.value}\n                                onChange={() => (handleChange(event,user))}\n                                value={componentsExisted[user.value] !== undefined ? componentsExisted[user.value].quantity : ''}\n                                type=\"number\"\n                              />\n                            </StyledTableCell>\n                          </StyledTableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                </CardContent>\n              </Card>\n            )}\n          </Grid>\n        ))}\n    </Grid>\n  );\n};\n\nTableSelector.propTypes = {\n  className: PropTypes.string,\n  listTable: PropTypes.object\n};\n\nexport default TableSelector;\n"]},"metadata":{},"sourceType":"module"}