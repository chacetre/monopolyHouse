{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hookpedals/src/views/UserList/components/UpdateStockModal.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Modal, Card, CardHeader, CardContent, CardActions, Grid, Divider, Typography, TextField, MenuItem, Button, FormControl, Select, InputLabel } from '@material-ui/core';\nimport CloseRounded from '@material-ui/icons/CloseRounded';\nimport { saveStockSousTypeInDataBase } from '../../../request/stockAPI';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    outline: 'none',\n    boxShadow: theme.shadows[20],\n    width: 700,\n    maxHeight: '100%',\n    overflowY: 'auto',\n    maxWidth: '100%'\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  }\n}));\n\nfunction UpdateStockModal({\n  open,\n  onClose,\n  composent,\n  className,\n  ...rest\n}) {\n  const classes = useStyles();\n  const [stock, setStock] = useState(0);\n  const [value, setValue] = useState(-1);\n  const [type, setType] = useState('led');\n  const [sousType, setSousType] = useState();\n  const [composentL, setComposent] = useState({});\n  const [disableValeur, setDisableValeur] = useState(true);\n\n  function saveInDataBase() {\n    saveStockSousTypeInDataBase(type, sousType, value, stock);\n  }\n\n  const handleChangeValeur = event => {\n    setValue(event.target.value);\n    let stock = 0;\n\n    if (sousType !== undefined) {\n      stock = composentL.componentsStock[type][sousType][0].stock;\n    } else stock = composentL.componentsStock[type].values[0].stock;\n\n    console.log('stock', event.target.valueck);\n    setStock();\n  };\n\n  const handleChangeType = event => {\n    let values = event.target.value.split('.');\n    console.log('values', values);\n    setType(values[0]);\n\n    if (values.length > 1) {\n      setSousType(values[1]);\n      setStock();\n    } else setSousType(values[0]);\n\n    console.log('event', values);\n    setDisableValeur(false);\n  };\n\n  const handleStockUpdate = event => {\n    setStock(event.target.value);\n  };\n\n  const cancelClose = () => {\n    onClose();\n  };\n\n  const saveClose = () => {\n    saveInDataBase();\n    onClose();\n  };\n\n  const saveOtherUpdateClose = () => {\n    saveInDataBase();\n    setValue('');\n    setStock(0);\n  };\n\n  useEffect(() => {\n    console.log('composent update', composent);\n    setComposent(composent);\n  }, [composent]);\n\n  if (!open) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    onClose: onClose,\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: \"Mise \\xE0 jour du stock\",\n    action: /*#__PURE__*/React.createElement(Button, {\n      onClick: cancelClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CloseRounded, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, \"Composant\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, \"Stock\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl,\n    variant: \"outlined\",\n    size: \"small\",\n    fullWidth: true,\n    values: type,\n    onChange: handleChangeType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    native: true,\n    defaultValue: \"\",\n    id: \"grouped-native-select\",\n    name: \"type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 19\n    }\n  }, composentL.componentsAvailable !== undefined && composentL.componentsAvailable.map(option => /*#__PURE__*/React.createElement(React.Fragment, null, composentL.componentsStock[option].typeAvailable !== undefined && composentL.componentsStock[option].typeAvailable.length === 1 && /*#__PURE__*/React.createElement(\"option\", {\n    value: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 31\n    }\n  }, option.toUpperCase()), composentL.componentsStock[option].typeAvailable !== undefined && composentL.componentsStock[option].typeAvailable.length !== 1 && /*#__PURE__*/React.createElement(\"optgroup\", {\n    label: option.toUpperCase(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 31\n    }\n  }, composentL.componentsStock[option].typeAvailable.map(type => /*#__PURE__*/React.createElement(\"option\", {\n    value: `${option}.${type}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 35\n    }\n  }, type.toUpperCase())))))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-select-currency\",\n    select: true,\n    disabled: disableValeur,\n    fullWidth: true,\n    value: value,\n    onChange: handleChangeValeur,\n    variant: \"outlined\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, composentL.componentsStock !== undefined && sousType !== undefined && Object.values(composentL.componentsStock[type][sousType]).map((option, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 23\n    }\n  }, option.label)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    name: \"stock\",\n    onChange: handleStockUpdate,\n    value: stock,\n    variant: \"outlined\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardActions, {\n    className: classes.actions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: saveOtherUpdateClose,\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, \"Update une autre\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: saveClose,\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, \"Save\")))));\n}\n\nUpdateStockModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\nUpdateStockModal.defaultProps = {\n  open: false,\n  onClose: () => {}\n};\nexport default UpdateStockModal;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hookpedals/src/views/UserList/components/UpdateStockModal.js"],"names":["React","useState","useEffect","PropTypes","clsx","makeStyles","Modal","Card","CardHeader","CardContent","CardActions","Grid","Divider","Typography","TextField","MenuItem","Button","FormControl","Select","InputLabel","CloseRounded","saveStockSousTypeInDataBase","useStyles","theme","root","position","top","left","transform","outline","boxShadow","shadows","width","maxHeight","overflowY","maxWidth","actions","justifyContent","UpdateStockModal","open","onClose","composent","className","rest","classes","stock","setStock","value","setValue","type","setType","sousType","setSousType","composentL","setComposent","disableValeur","setDisableValeur","saveInDataBase","handleChangeValeur","event","target","undefined","componentsStock","values","console","log","valueck","handleChangeType","split","length","handleStockUpdate","cancelClose","saveClose","saveOtherUpdateClose","formControl","componentsAvailable","map","option","typeAvailable","toUpperCase","Object","index","label","propTypes","string","customer","any","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Modal,\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Grid,\n  Divider,\n  Typography,\n  TextField,\n  MenuItem,\n  Button,\n  FormControl,\n  Select,\n  InputLabel\n} from '@material-ui/core';\nimport CloseRounded from '@material-ui/icons/CloseRounded';\nimport { saveStockSousTypeInDataBase } from '../../../request/stockAPI';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    outline: 'none',\n    boxShadow: theme.shadows[20],\n    width: 700,\n    maxHeight: '100%',\n    overflowY: 'auto',\n    maxWidth: '100%'\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  }\n}));\n\nfunction UpdateStockModal({ open, onClose, composent, className, ...rest }) {\n  const classes = useStyles();\n  const [stock, setStock] = useState(0);\n  const [value, setValue] = useState(-1);\n  const [type, setType] = useState('led');\n  const [sousType, setSousType] = useState();\n  const [composentL, setComposent] = useState({});\n  const [disableValeur, setDisableValeur] = useState(true);\n\n  function saveInDataBase() {\n    saveStockSousTypeInDataBase(type, sousType, value, stock);\n  }\n\n  const handleChangeValeur = event => {\n    setValue(event.target.value);\n\n   \n\n    let stock = 0;\n    if (sousType !== undefined) {\n      stock = composentL.componentsStock[type][sousType][0].stock;\n    } else stock = composentL.componentsStock[type].values[0].stock;\n\n    console.log('stock', event.target.valueck);\n\n    setStock();\n  };\n\n  const handleChangeType = event => {\n    let values = event.target.value.split('.');\n    console.log('values', values);\n\n    setType(values[0]);\n    if (values.length > 1) {\n      setSousType(values[1]);\n      setStock()\n    }\n\n    else setSousType(values[0]);\n\n    console.log('event', values);\n\n    setDisableValeur(false);\n  };\n\n  const handleStockUpdate = event => {\n    setStock(event.target.value);\n  };\n\n  const cancelClose = () => {\n    onClose();\n  };\n\n  const saveClose = () => {\n    saveInDataBase();\n    onClose();\n  };\n\n  const saveOtherUpdateClose = () => {\n    saveInDataBase();\n    setValue('');\n    setStock(0);\n  };\n\n  useEffect(() => {\n    console.log('composent update', composent);\n    setComposent(composent);\n  }, [composent]);\n\n  if (!open) {\n    return null;\n  }\n\n  return (\n    <Modal onClose={onClose} open={open}>\n      <Card {...rest} className={clsx(classes.root, className)}>\n        <form>\n          <CardHeader\n            title=\"Mise à jour du stock\"\n            action={\n              <Button onClick={cancelClose}>\n                <CloseRounded />\n              </Button>\n            }\n          />\n          <Divider />\n          <CardContent>\n            <Grid container spacing={3}>\n              <Grid item xs={9}>\n                <Typography>Composant</Typography>\n              </Grid>\n              <Grid item xs={3}>\n                <Typography>Stock</Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <FormControl\n                  className={classes.formControl}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  fullWidth\n                  values={type}\n                  onChange={handleChangeType}\n                >\n                  <Select native defaultValue=\"\" id=\"grouped-native-select\" name='type'>\n                    {composentL.componentsAvailable !== undefined &&\n                      composentL.componentsAvailable.map(option => (\n                        <>\n                          {composentL.componentsStock[option].typeAvailable !==\n                            undefined &&\n                            composentL.componentsStock[option].typeAvailable\n                              .length === 1 && (\n                              <option value={option}>\n                                {option.toUpperCase()}\n                              </option>\n                            )}\n                          {composentL.componentsStock[option].typeAvailable !==\n                            undefined &&\n                            composentL.componentsStock[option].typeAvailable\n                              .length !== 1 && (\n                              <optgroup label={option.toUpperCase()}>\n                                {composentL.componentsStock[\n                                  option\n                                ].typeAvailable.map(type => (\n                                  <option value={`${option}.${type}`}>\n                                    {type.toUpperCase()}\n                                  </option>\n                                ))}\n                              </optgroup>\n                            )}\n                        </>\n                      ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={3}>\n                <TextField\n                  id=\"outlined-select-currency\"\n                  select\n                  disabled={disableValeur}\n                  fullWidth\n                  value={value}\n                  onChange={handleChangeValeur}\n                  variant=\"outlined\"\n                  size=\"small\"\n                >\n                  {composentL.componentsStock !== undefined &&\n                    sousType !== undefined &&\n                    Object.values(composentL.componentsStock[type][sousType]).map((option, index) => (\n                      <MenuItem key={index} value={index}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                </TextField>\n              </Grid>\n              <Grid item xs={2}></Grid>\n              <Grid item xs={3}>\n                <TextField\n                  fullWidth\n                  name=\"stock\"\n                  onChange={handleStockUpdate}\n                  value={stock}\n                  variant=\"outlined\"\n                  size=\"small\"\n                />\n              </Grid>\n            </Grid>\n          </CardContent>\n          <Divider />\n          <CardActions className={classes.actions}>\n            <Button\n              color=\"primary\"\n              onClick={saveOtherUpdateClose}\n              variant=\"contained\"\n            >\n              Update une autre\n            </Button>\n            <Button color=\"primary\" onClick={saveClose} variant=\"contained\">\n              Save\n            </Button>\n          </CardActions>\n        </form>\n      </Card>\n    </Modal>\n  );\n}\n\nUpdateStockModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\n\nUpdateStockModal.defaultProps = {\n  open: false,\n  onClose: () => {}\n};\n\nexport default UpdateStockModal;\n"]},"metadata":{},"sourceType":"module"}