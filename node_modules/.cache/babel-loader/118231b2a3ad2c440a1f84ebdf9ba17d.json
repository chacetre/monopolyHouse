{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hookpedals/src/views/Dashboard/components/GraphPedalsMade.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles, useTheme } from \"@material-ui/styles\";\nimport { Card, CardHeader, CardContent, IconButton, Divider, Typography, colors } from \"@material-ui/core\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { getPedalsDataBase } from \"request/pedalsAPI\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: \"100%\"\n  },\n  chartContainer: {\n    position: \"relative\",\n    height: \"300px\"\n  },\n  stats: {\n    marginTop: theme.spacing(2),\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  device: {\n    textAlign: \"center\",\n    padding: theme.spacing(1)\n  },\n  deviceIcon: {\n    color: theme.palette.icon\n  }\n}));\n\nconst GraphPedalsMade = props => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [dataPedals, setDataPedals] = useState({});\n  const [pedalsList, setPedalsList] = useState([]);\n  const colorBase = [colors.red, colors.green, colors.blue, colors.yellow];\n  const colorNumber = [300, 400, 500, 600, 700, 800, 900];\n  const [data, setData] = useState({\n    datasets: [{\n      data: [63, 15, 22],\n      backgroundColor: [theme.palette.primary.main, theme.palette.error.main, theme.palette.error.main]\n    }],\n    labels: [\"Desktop\", \"Tablet\", \"Mobile\"]\n  });\n\n  function getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function generateRandomColor() {\n    const generateRandomBase = getRandomIntInclusive(0, colorBase.length - 1);\n    const generateRandomShade = getRandomIntInclusive(0, colorNumber.length - 1);\n    return colorBase[generateRandomBase][colorNumber[generateRandomShade]];\n  }\n\n  function formateData() {\n    const newArray = [];\n    const values = [];\n    const colors = [];\n    const labels = [];\n    Object.values(dataPedals).forEach(element => {\n      const color = generateRandomColor();\n      const scheme = {\n        title: element.title,\n        value: element.totalMade,\n        color: color\n      };\n      values.push(element.totalMade);\n      colors.push(color);\n      labels.push(element.title);\n      newArray.push(scheme);\n    });\n    console.log(\"newArray\", newArray);\n    setPedalsList(newArray);\n    setData({\n      datasets: [{\n        data: values,\n        backgroundColor: colors\n      }],\n      labels: labels\n    });\n  }\n\n  useEffect(() => {\n    formateData();\n  }, [dataPedals]);\n  useEffect(() => {\n    getPedalsDataBase(response => {\n      console.log(\"element\", response);\n      setDataPedals(response);\n    });\n  }, []);\n  const options = {\n    legend: {\n      display: false\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 80,\n    layout: {\n      padding: 0\n    },\n    tooltips: {\n      enabled: true,\n      mode: \"index\",\n      intersect: false,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary\n    }\n  };\n  return /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(CardHeader, {\n    action: /*#__PURE__*/React.createElement(IconButton, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RefreshIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    })),\n    title: \"P\\xE9dales r\\xE9aliser\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.stats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 19\n    }\n  }, \"Dessert (100g serving)\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 19\n    }\n  }, \"Calories\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }, \"Fat\\xA0(g)\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 19\n    }\n  }, \"Carbs\\xA0(g)\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 19\n    }\n  }, \"Protein\\xA0(g)\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }, pedalsList.map(pedal => /*#__PURE__*/React.createElement(TableRow, {\n    key: pedal.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }, row.name), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 21\n    }\n  }, pedal.title), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    style: {\n      color: pedal.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, pedal.value), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 21\n    }\n  }, row.carbs), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }, row.protein)))))))));\n};\n\nGraphPedalsMade.propTypes = {\n  className: PropTypes.string\n};\nexport default GraphPedalsMade;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hookpedals/src/views/Dashboard/components/GraphPedalsMade.js"],"names":["React","useEffect","useState","Doughnut","clsx","PropTypes","makeStyles","useTheme","Card","CardHeader","CardContent","IconButton","Divider","Typography","colors","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","RefreshIcon","getPedalsDataBase","useStyles","theme","root","height","chartContainer","position","stats","marginTop","spacing","display","justifyContent","device","textAlign","padding","deviceIcon","color","palette","icon","GraphPedalsMade","props","className","rest","classes","dataPedals","setDataPedals","pedalsList","setPedalsList","colorBase","red","green","blue","yellow","colorNumber","data","setData","datasets","backgroundColor","primary","main","error","labels","getRandomIntInclusive","min","max","Math","ceil","floor","random","generateRandomColor","generateRandomBase","length","generateRandomShade","formateData","newArray","values","Object","forEach","element","scheme","title","value","totalMade","push","console","log","response","options","legend","responsive","maintainAspectRatio","animation","cutoutPercentage","layout","tooltips","enabled","mode","intersect","borderWidth","borderColor","divider","white","titleFontColor","text","bodyFontColor","secondary","footerFontColor","Paper","table","map","pedal","row","name","carbs","protein","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles, useTheme } from \"@material-ui/styles\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  IconButton,\n  Divider,\n  Typography,\n  colors,\n} from \"@material-ui/core\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { getPedalsDataBase } from \"request/pedalsAPI\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100%\",\n  },\n  chartContainer: {\n    position: \"relative\",\n    height: \"300px\",\n  },\n  stats: {\n    marginTop: theme.spacing(2),\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  device: {\n    textAlign: \"center\",\n    padding: theme.spacing(1),\n  },\n  deviceIcon: {\n    color: theme.palette.icon,\n  },\n}));\n\nconst GraphPedalsMade = (props) => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const [dataPedals, setDataPedals] = useState({});\n  const [pedalsList, setPedalsList] = useState([]);\n  const colorBase = [colors.red, colors.green, colors.blue, colors.yellow];\n  const colorNumber = [300, 400, 500, 600, 700, 800, 900];\n\n  const [data, setData] = useState({\n    datasets: [\n      {\n        data: [63, 15, 22],\n        backgroundColor: [\n          theme.palette.primary.main,\n          theme.palette.error.main,\n          theme.palette.error.main,\n        ],\n      },\n    ],\n    labels: [\"Desktop\", \"Tablet\", \"Mobile\"],\n  });\n\n  function getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function generateRandomColor() {\n    const generateRandomBase = getRandomIntInclusive(0, colorBase.length - 1);\n    const generateRandomShade = getRandomIntInclusive(\n      0,\n      colorNumber.length - 1\n    );\n\n    return colorBase[generateRandomBase][colorNumber[generateRandomShade]];\n  }\n\n  function formateData() {\n    const newArray = [];\n    const values = [];\n    const colors = [];\n    const labels = [];\n\n    Object.values(dataPedals).forEach((element) => {\n      const color = generateRandomColor();\n      const scheme = {\n        title: element.title,\n        value: element.totalMade,\n        color: color,\n      };\n      values.push(element.totalMade);\n      colors.push(color);\n      labels.push(element.title);\n      newArray.push(scheme);\n    });\n\n    console.log(\"newArray\", newArray);\n    setPedalsList(newArray);\n\n    setData({\n      datasets: [\n        {\n          data: values,\n          backgroundColor: colors,\n        },\n      ],\n      labels: labels,\n    });\n  }\n\n  useEffect(() => {\n    formateData();\n  }, [dataPedals]);\n\n  useEffect(() => {\n    getPedalsDataBase((response) => {\n      console.log(\"element\", response);\n      setDataPedals(response);\n    });\n  }, []);\n\n  const options = {\n    legend: {\n      display: false,\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    cutoutPercentage: 80,\n    layout: { padding: 0 },\n    tooltips: {\n      enabled: true,\n      mode: \"index\",\n      intersect: false,\n      borderWidth: 1,\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.white,\n      titleFontColor: theme.palette.text.primary,\n      bodyFontColor: theme.palette.text.secondary,\n      footerFontColor: theme.palette.text.secondary,\n    },\n  };\n\n  return (\n    <Card {...rest} className={clsx(classes.root, className)}>\n      <CardHeader\n        action={\n          <IconButton size=\"small\">\n            <RefreshIcon />\n          </IconButton>\n        }\n        title=\"Pédales réaliser\"\n      />\n      <Divider />\n      <CardContent>\n        <div className={classes.chartContainer}>\n          <Doughnut data={data} options={options} />\n        </div>\n        <div className={classes.stats}>\n          <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Dessert (100g serving)</TableCell>\n                  <TableCell align=\"right\">Calories</TableCell>\n                  <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n                  <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n                  <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {pedalsList.map((pedal)=> (\n                  <TableRow key={pedal.title}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {row.name}\n                    </TableCell>\n                    <TableCell align=\"right\">{pedal.title}</TableCell>\n                    <TableCell align=\"right\" style={{ color: pedal.color }}>{pedal.value}</TableCell>\n                    <TableCell align=\"right\">{row.carbs}</TableCell>\n                    <TableCell align=\"right\">{row.protein}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nGraphPedalsMade.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default GraphPedalsMade;\n"]},"metadata":{},"sourceType":"module"}