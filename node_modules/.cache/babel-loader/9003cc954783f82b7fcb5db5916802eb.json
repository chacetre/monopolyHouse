{"ast":null,"code":"var _jsxFileName = \"/Users/charlottecetre/Desktop/hookpedals/src/views/ProductList/components/AddPedalModal.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport { Modal, Card, CardHeader, CardContent, CardActions, Grid, Divider, Typography, TextField, MenuItem, Button, colors, Select, InputLabel } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport TableSelector from \"./TableSelector\";\nimport { saveNewPedalsInDataBase } from \"../../../request/pedalsAPI\";\nimport { getStockDataBase } from \"../../../request/stockAPI\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    outline: \"none\",\n    boxShadow: theme.shadows[20],\n    width: \"60%\",\n    maxHeight: \"90%\",\n    overflowY: \"auto\",\n    maxWidth: \"100%\"\n  },\n  actions: {\n    justifyContent: \"flex-end\"\n  },\n  center: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  divider: {\n    margin: 10\n  }\n}));\nconst StyledToggleButtonGroup = withStyles(theme => ({\n  grouped: {\n    margin: theme.spacing(1),\n    border: \"none\",\n    background: theme.palette.background.default,\n    padding: theme.spacing(0, 3),\n    \"&:not(:first-child)\": {\n      borderRadius: theme.shape.borderRadius\n    },\n    \"&:first-child\": {\n      borderRadius: theme.shape.borderRadius\n    }\n  }\n}))(ToggleButtonGroup);\n\nfunction AddPedalModal({\n  open,\n  onClose,\n  className,\n  index,\n  pedalInformations,\n  ...rest\n}) {\n  const classes = useStyles();\n  const [componentCurrent, setComponentCurrent] = useState(\"aop\");\n  const [componentsList, setComponentsList] = useState([]);\n  const [pedalCurrent, setPedalCurrent] = useState({});\n  const [indexCurrentPedal, setIndexCurrentPedal] = useState(0);\n\n  function saveInDataBase(index, pedalInformationsComplet) {\n    saveNewPedalsInDataBase(index, pedalInformationsComplet);\n  }\n\n  const handleChange = (event, user, keyName) => {\n    event.persist();\n    console.log(\"event change\", event.target.value);\n    setPedalCurrent(prevFormState => ({ ...prevFormState,\n      components: { ...prevFormState.components,\n        [user.value]: {\n          label: user.label,\n          path: `${componentCurrent}/${keyName}/${user.value}`,\n          quantity: event.target.value >= 0 ? event.target.value : 0\n        }\n      }\n    }));\n  };\n\n  const handleChangeName = event => {\n    event.persist();\n    setPedalCurrent(prevFormState => ({ ...prevFormState,\n      title: event.target.value\n    }));\n  };\n\n  const handleComponent = (event, newComponent) => {\n    setComponentCurrent(newComponent);\n  };\n\n  const cancelClose = () => {\n    onClose();\n  };\n\n  const saveClose = () => {\n    const today = new Date();\n    let pedalScheme = { ...pedalCurrent,\n      totalMade: 0,\n      createdAt: today.getDate() + \"/\" + (today.getMonth() + 1) + \"/\" + today.getFullYear(),\n      id: indexCurrentPedal\n    };\n\n    if (pedalInformations !== undefined) {\n      pedalScheme = { ...pedalScheme,\n        id: pedalInformations.id\n      };\n      saveInDataBase(pedalInformations.id, pedalScheme);\n    } else {\n      saveInDataBase(indexCurrentPedal, pedalScheme);\n    } // snackbar ok enregistrer\n\n\n    onClose();\n  };\n\n  useEffect(() => {\n    if (pedalInformations !== undefined) {\n      console.log(\"index modal pedal info\", pedalInformations);\n      setPedalCurrent(pedalInformations);\n    }\n  }, [pedalInformations]);\n  useEffect(() => {\n    console.log(\"index modal from new\", index);\n    setIndexCurrentPedal(index);\n  }, [index]);\n  useEffect(() => {\n    getStockDataBase(response => {\n      setComponentsList(response);\n    });\n  }, []);\n\n  if (!open) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    onClose: onClose,\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: pedalCurrent.title !== null ? \"Ajouter une nouvelle pÃ©dale\" : \"Modifier\",\n    action: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      onClick: cancelClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: saveClose,\n      variant: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, \"Save\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    label: \"Nom de la p\\xE9dale\",\n    placeholder: \"hello\",\n    name: \"namePedal\",\n    onChange: handleChangeName,\n    value: pedalCurrent.title || \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(StyledToggleButtonGroup, {\n    size: \"small\",\n    value: componentCurrent,\n    exclusive: true,\n    onChange: handleComponent,\n    \"aria-label\": \"text alignment\",\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }, componentsList.componentsAvailable.sort().slice(0, 8).map(user => /*#__PURE__*/React.createElement(ToggleButton, {\n    value: user,\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 21\n    }\n  }, user))), /*#__PURE__*/React.createElement(StyledToggleButtonGroup, {\n    size: \"small\",\n    value: componentCurrent,\n    exclusive: true,\n    onChange: handleComponent,\n    \"aria-label\": \"text alignment\",\n    className: classes.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }, componentsList.componentsAvailable.slice(8).map(user => /*#__PURE__*/React.createElement(ToggleButton, {\n    value: user,\n    \"aria-label\": \"left aligned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 19\n    }\n  }, user)))), /*#__PURE__*/React.createElement(TableSelector, {\n    listTable: componentsList.componentsStock[componentCurrent],\n    componentsExisted: pedalCurrent.components || {},\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }))));\n}\n\nAddPedalModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool\n};\nAddPedalModal.defaultProps = {\n  open: false,\n  onClose: () => {}\n};\nexport default AddPedalModal;","map":{"version":3,"sources":["/Users/charlottecetre/Desktop/hookpedals/src/views/ProductList/components/AddPedalModal.js"],"names":["React","useState","useEffect","PropTypes","clsx","makeStyles","withStyles","Modal","Card","CardHeader","CardContent","CardActions","Grid","Divider","Typography","TextField","MenuItem","Button","colors","Select","InputLabel","ToggleButton","ToggleButtonGroup","TableSelector","saveNewPedalsInDataBase","getStockDataBase","useStyles","theme","root","position","top","left","transform","outline","boxShadow","shadows","width","maxHeight","overflowY","maxWidth","actions","justifyContent","center","display","alignItems","divider","margin","StyledToggleButtonGroup","grouped","spacing","border","background","palette","default","padding","borderRadius","shape","AddPedalModal","open","onClose","className","index","pedalInformations","rest","classes","componentCurrent","setComponentCurrent","componentsList","setComponentsList","pedalCurrent","setPedalCurrent","indexCurrentPedal","setIndexCurrentPedal","saveInDataBase","pedalInformationsComplet","handleChange","event","user","keyName","persist","console","log","target","value","prevFormState","components","label","path","quantity","handleChangeName","title","handleComponent","newComponent","cancelClose","saveClose","today","Date","pedalScheme","totalMade","createdAt","getDate","getMonth","getFullYear","id","undefined","response","componentsAvailable","sort","slice","map","componentsStock","propTypes","string","customer","any","func","bool","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,qBAAvC;AACA,SACEC,KADF,EAEEC,IAFF,EAGEC,UAHF,EAIEC,WAJF,EAKEC,WALF,EAMEC,IANF,EAOEC,OAPF,EAQEC,UARF,EASEC,SATF,EAUEC,QAVF,EAWEC,MAXF,EAYEC,MAZF,EAaEC,MAbF,EAcEC,UAdF,QAeO,mBAfP;AAgBA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,uBAAT,QAAwC,4BAAxC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,MAAMC,SAAS,GAAGrB,UAAU,CAAEsB,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,UADN;AAEJC,IAAAA,GAAG,EAAE,KAFD;AAGJC,IAAAA,IAAI,EAAE,KAHF;AAIJC,IAAAA,SAAS,EAAE,uBAJP;AAKJC,IAAAA,OAAO,EAAE,MALL;AAMJC,IAAAA,SAAS,EAAEP,KAAK,CAACQ,OAAN,CAAc,EAAd,CANP;AAOJC,IAAAA,KAAK,EAAE,KAPH;AAQJC,IAAAA,SAAS,EAAE,KARP;AASJC,IAAAA,SAAS,EAAE,MATP;AAUJC,IAAAA,QAAQ,EAAE;AAVN,GADiC;AAavCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,cAAc,EAAE;AADT,GAb8B;AAgBvCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE,MADH;AAENF,IAAAA,cAAc,EAAE,QAFV;AAGNG,IAAAA,UAAU,EAAE;AAHN,GAhB+B;AAqBvCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAE;AADD;AArB8B,CAAZ,CAAD,CAA5B;AA0BA,MAAMC,uBAAuB,GAAGzC,UAAU,CAAEqB,KAAD,KAAY;AACrDqB,EAAAA,OAAO,EAAE;AACPF,IAAAA,MAAM,EAAEnB,KAAK,CAACsB,OAAN,CAAc,CAAd,CADD;AAEPC,IAAAA,MAAM,EAAE,MAFD;AAGPC,IAAAA,UAAU,EAAExB,KAAK,CAACyB,OAAN,CAAcD,UAAd,CAAyBE,OAH9B;AAIPC,IAAAA,OAAO,EAAE3B,KAAK,CAACsB,OAAN,CAAc,CAAd,EAAiB,CAAjB,CAJF;AAKP,2BAAuB;AACrBM,MAAAA,YAAY,EAAE5B,KAAK,CAAC6B,KAAN,CAAYD;AADL,KALhB;AAQP,qBAAiB;AACfA,MAAAA,YAAY,EAAE5B,KAAK,CAAC6B,KAAN,CAAYD;AADX;AARV;AAD4C,CAAZ,CAAD,CAAV,CAa5BjC,iBAb4B,CAAhC;;AAeA,SAASmC,aAAT,CAAuB;AACrBC,EAAAA,IADqB;AAErBC,EAAAA,OAFqB;AAGrBC,EAAAA,SAHqB;AAIrBC,EAAAA,KAJqB;AAKrBC,EAAAA,iBALqB;AAMrB,KAAGC;AANkB,CAAvB,EAOG;AACD,QAAMC,OAAO,GAAGtC,SAAS,EAAzB;AAEA,QAAM,CAACuC,gBAAD,EAAmBC,mBAAnB,IAA0CjE,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACkE,cAAD,EAAiBC,iBAAjB,IAAsCnE,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACoE,YAAD,EAAeC,eAAf,IAAkCrE,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACsE,iBAAD,EAAoBC,oBAApB,IAA4CvE,QAAQ,CAAC,CAAD,CAA1D;;AAEA,WAASwE,cAAT,CAAwBZ,KAAxB,EAA+Ba,wBAA/B,EAAyD;AACvDlD,IAAAA,uBAAuB,CAACqC,KAAD,EAAQa,wBAAR,CAAvB;AACD;;AAED,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,OAAd,KAA0B;AAC7CF,IAAAA,KAAK,CAACG,OAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,KAAK,CAACM,MAAN,CAAaC,KAAzC;AACAb,IAAAA,eAAe,CAAEc,aAAD,KAAoB,EAClC,GAAGA,aAD+B;AAElCC,MAAAA,UAAU,EAAE,EACV,GAAGD,aAAa,CAACC,UADP;AAEV,SAACR,IAAI,CAACM,KAAN,GAAc;AACZG,UAAAA,KAAK,EAAET,IAAI,CAACS,KADA;AAEZC,UAAAA,IAAI,EAAG,GAAEtB,gBAAiB,IAAGa,OAAQ,IAAGD,IAAI,CAACM,KAAM,EAFvC;AAGZK,UAAAA,QAAQ,EAAEZ,KAAK,CAACM,MAAN,CAAaC,KAAb,IAAsB,CAAtB,GAA0BP,KAAK,CAACM,MAAN,CAAaC,KAAvC,GAA+C;AAH7C;AAFJ;AAFsB,KAApB,CAAD,CAAf;AAWD,GAdD;;AAgBA,QAAMM,gBAAgB,GAAIb,KAAD,IAAW;AAClCA,IAAAA,KAAK,CAACG,OAAN;AACAT,IAAAA,eAAe,CAAEc,aAAD,KAAoB,EAClC,GAAGA,aAD+B;AAElCM,MAAAA,KAAK,EAAEd,KAAK,CAACM,MAAN,CAAaC;AAFc,KAApB,CAAD,CAAf;AAID,GAND;;AAQA,QAAMQ,eAAe,GAAG,CAACf,KAAD,EAAQgB,YAAR,KAAyB;AAC/C1B,IAAAA,mBAAmB,CAAC0B,YAAD,CAAnB;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACxBlC,IAAAA,OAAO;AACR,GAFD;;AAIA,QAAMmC,SAAS,GAAG,MAAM;AACtB,UAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AAEA,QAAIC,WAAW,GAAG,EAChB,GAAG5B,YADa;AAEhB6B,MAAAA,SAAS,EAAE,CAFK;AAGhBC,MAAAA,SAAS,EACPJ,KAAK,CAACK,OAAN,KACA,GADA,IAECL,KAAK,CAACM,QAAN,KAAmB,CAFpB,IAGA,GAHA,GAIAN,KAAK,CAACO,WAAN,EARc;AAShBC,MAAAA,EAAE,EAAEhC;AATY,KAAlB;;AAYA,QAAIT,iBAAiB,KAAK0C,SAA1B,EAAqC;AACnCP,MAAAA,WAAW,GAAG,EACZ,GAAGA,WADS;AAEZM,QAAAA,EAAE,EAAEzC,iBAAiB,CAACyC;AAFV,OAAd;AAIA9B,MAAAA,cAAc,CAACX,iBAAiB,CAACyC,EAAnB,EAAuBN,WAAvB,CAAd;AACD,KAND,MAMO;AACLxB,MAAAA,cAAc,CAACF,iBAAD,EAAoB0B,WAApB,CAAd;AACD,KAvBqB,CAyBtB;;;AACAtC,IAAAA,OAAO;AACR,GA3BD;;AA6BAzD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI4D,iBAAiB,KAAK0C,SAA1B,EAAqC;AACnCxB,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCnB,iBAAtC;AACAQ,MAAAA,eAAe,CAACR,iBAAD,CAAf;AACD;AACF,GALQ,EAKN,CAACA,iBAAD,CALM,CAAT;AAOA5D,EAAAA,SAAS,CAAC,MAAM;AACd8E,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCpB,KAApC;AACAW,IAAAA,oBAAoB,CAACX,KAAD,CAApB;AACD,GAHQ,EAGN,CAACA,KAAD,CAHM,CAAT;AAKA3D,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,gBAAgB,CAAEgF,QAAD,IAAc;AAC7BrC,MAAAA,iBAAiB,CAACqC,QAAD,CAAjB;AACD,KAFe,CAAhB;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAI,CAAC/C,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEC,OAAhB;AAAyB,IAAA,IAAI,EAAED,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,oBAAUK,IAAV;AAAgB,IAAA,SAAS,EAAE3D,IAAI,CAAC4D,OAAO,CAACpC,IAAT,EAAegC,SAAf,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,KAAK,EACHS,YAAY,CAACqB,KAAb,KAAuB,IAAvB,GACI,6BADJ,GAEI,UAJR;AAME,IAAA,MAAM,eACJ,uDACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAEC,SAAjC;AAA4C,MAAA,OAAO,EAAC,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAgBE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,eAiBE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,OAAO,EAAC,UADV;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,KAAK,EAAC,qBAJR;AAKE,IAAA,WAAW,EAAC,OALd;AAME,IAAA,IAAI,EAAC,WANP;AAOE,IAAA,QAAQ,EAAEL,gBAPZ;AAQE,IAAA,KAAK,EAAEpB,YAAY,CAACqB,KAAb,IAAsB,EAR/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAWE,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAE1B,OAAO,CAACnB,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,eAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,uBAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAEoB,gBAFT;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,QAAQ,EAAE0B,eAJZ;AAKE,kBAAW,gBALb;AAME,IAAA,SAAS,EAAE3B,OAAO,CAACtB,MANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGyB,cAAc,CAACuC,mBAAf,CACEC,IADF,GAEEC,KAFF,CAEQ,CAFR,EAEW,CAFX,EAGEC,GAHF,CAGOhC,IAAD,iBACH,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,IAArB;AAA2B,kBAAW,cAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,CAJH,CARH,CADF,eAkBE,oBAAC,uBAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAEZ,gBAFT;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,QAAQ,EAAE0B,eAJZ;AAKE,kBAAW,gBALb;AAME,IAAA,SAAS,EAAE3B,OAAO,CAACtB,MANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGyB,cAAc,CAACuC,mBAAf,CAAmCE,KAAnC,CAAyC,CAAzC,EAA4CC,GAA5C,CAAiDhC,IAAD,iBAC/C,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,IAArB;AAA2B,kBAAW,cAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,CADD,CARH,CAlBF,CAZF,eA8CE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAEV,cAAc,CAAC2C,eAAf,CAA+B7C,gBAA/B,CADb;AAEE,IAAA,iBAAiB,EAAEI,YAAY,CAACgB,UAAb,IAA2B,EAFhD;AAGE,IAAA,QAAQ,EAAEV,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9CF,CAjBF,eAqEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArEF,CADF,CADF,CADF;AA6ED;;AAEDlB,aAAa,CAACsD,SAAd,GAA0B;AACxBnD,EAAAA,SAAS,EAAEzD,SAAS,CAAC6G,MADG;AAExBC,EAAAA,QAAQ,EAAE9G,SAAS,CAAC+G,GAFI;AAGxBvD,EAAAA,OAAO,EAAExD,SAAS,CAACgH,IAHK;AAIxBzD,EAAAA,IAAI,EAAEvD,SAAS,CAACiH;AAJQ,CAA1B;AAOA3D,aAAa,CAAC4D,YAAd,GAA6B;AAC3B3D,EAAAA,IAAI,EAAE,KADqB;AAE3BC,EAAAA,OAAO,EAAE,MAAM,CAAE;AAFU,CAA7B;AAKA,eAAeF,aAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport {\n  Modal,\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Grid,\n  Divider,\n  Typography,\n  TextField,\n  MenuItem,\n  Button,\n  colors,\n  Select,\n  InputLabel,\n} from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport TableSelector from \"./TableSelector\";\nimport { saveNewPedalsInDataBase } from \"../../../request/pedalsAPI\";\nimport { getStockDataBase } from \"../../../request/stockAPI\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    outline: \"none\",\n    boxShadow: theme.shadows[20],\n    width: \"60%\",\n    maxHeight: \"90%\",\n    overflowY: \"auto\",\n    maxWidth: \"100%\",\n  },\n  actions: {\n    justifyContent: \"flex-end\",\n  },\n  center: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  divider: {\n    margin: 10,\n  },\n}));\n\nconst StyledToggleButtonGroup = withStyles((theme) => ({\n  grouped: {\n    margin: theme.spacing(1),\n    border: \"none\",\n    background: theme.palette.background.default,\n    padding: theme.spacing(0, 3),\n    \"&:not(:first-child)\": {\n      borderRadius: theme.shape.borderRadius,\n    },\n    \"&:first-child\": {\n      borderRadius: theme.shape.borderRadius,\n    },\n  },\n}))(ToggleButtonGroup);\n\nfunction AddPedalModal({\n  open,\n  onClose,\n  className,\n  index,\n  pedalInformations,\n  ...rest\n}) {\n  const classes = useStyles();\n\n  const [componentCurrent, setComponentCurrent] = useState(\"aop\");\n  const [componentsList, setComponentsList] = useState([]);\n  const [pedalCurrent, setPedalCurrent] = useState({});\n  const [indexCurrentPedal, setIndexCurrentPedal] = useState(0);\n\n  function saveInDataBase(index, pedalInformationsComplet) {\n    saveNewPedalsInDataBase(index, pedalInformationsComplet);\n  }\n\n  const handleChange = (event, user, keyName) => {\n    event.persist();\n    console.log(\"event change\", event.target.value);\n    setPedalCurrent((prevFormState) => ({\n      ...prevFormState,\n      components: {\n        ...prevFormState.components,\n        [user.value]: {\n          label: user.label,\n          path: `${componentCurrent}/${keyName}/${user.value}`,\n          quantity: event.target.value >= 0 ? event.target.value : 0,\n        },\n      },\n    }));\n  };\n\n  const handleChangeName = (event) => {\n    event.persist();\n    setPedalCurrent((prevFormState) => ({\n      ...prevFormState,\n      title: event.target.value,\n    }));\n  };\n\n  const handleComponent = (event, newComponent) => {\n    setComponentCurrent(newComponent);\n  };\n\n  const cancelClose = () => {\n    onClose();\n  };\n\n  const saveClose = () => {\n    const today = new Date();\n\n    let pedalScheme = {\n      ...pedalCurrent,\n      totalMade: 0,\n      createdAt:\n        today.getDate() +\n        \"/\" +\n        (today.getMonth() + 1) +\n        \"/\" +\n        today.getFullYear(),\n      id: indexCurrentPedal,\n    };\n\n    if (pedalInformations !== undefined) {\n      pedalScheme = {\n        ...pedalScheme,\n        id: pedalInformations.id,\n      };\n      saveInDataBase(pedalInformations.id, pedalScheme);\n    } else {\n      saveInDataBase(indexCurrentPedal, pedalScheme);\n    }\n\n    // snackbar ok enregistrer\n    onClose();\n  };\n\n  useEffect(() => {\n    if (pedalInformations !== undefined) {\n      console.log(\"index modal pedal info\", pedalInformations);\n      setPedalCurrent(pedalInformations);\n    }\n  }, [pedalInformations]);\n\n  useEffect(() => {\n    console.log(\"index modal from new\", index);\n    setIndexCurrentPedal(index);\n  }, [index]);\n\n  useEffect(() => {\n    getStockDataBase((response) => {\n      setComponentsList(response);\n    });\n  }, []);\n\n  if (!open) {\n    return null;\n  }\n\n  return (\n    <Modal onClose={onClose} open={open}>\n      <Card {...rest} className={clsx(classes.root, className)}>\n        <form>\n          <CardHeader\n            title={\n              pedalCurrent.title !== null\n                ? \"Ajouter une nouvelle pÃ©dale\"\n                : \"Modifier\"\n            }\n            action={\n              <>\n                <Button onClick={cancelClose}>Close</Button>\n                <Button color=\"primary\" onClick={saveClose} variant=\"contained\">\n                  Save\n                </Button>\n              </>\n            }\n          />\n          <Divider />\n          <CardContent>\n            <TextField\n              variant=\"outlined\"\n              size=\"medium\"\n              fullWidth\n              label=\"Nom de la pÃ©dale\"\n              placeholder=\"hello\"\n              name=\"namePedal\"\n              onChange={handleChangeName}\n              value={pedalCurrent.title || \"\"}\n            ></TextField>\n            <Divider className={classes.divider} />\n            <div>\n              <StyledToggleButtonGroup\n                size=\"small\"\n                value={componentCurrent}\n                exclusive\n                onChange={handleComponent}\n                aria-label=\"text alignment\"\n                className={classes.center}\n              >\n                {componentsList.componentsAvailable\n                  .sort()\n                  .slice(0, 8)\n                  .map((user) => (\n                    <ToggleButton value={user} aria-label=\"left aligned\">\n                      {user}\n                    </ToggleButton>\n                  ))}\n              </StyledToggleButtonGroup>\n              <StyledToggleButtonGroup\n                size=\"small\"\n                value={componentCurrent}\n                exclusive\n                onChange={handleComponent}\n                aria-label=\"text alignment\"\n                className={classes.center}\n              >\n                {componentsList.componentsAvailable.slice(8).map((user) => (\n                  <ToggleButton value={user} aria-label=\"left aligned\">\n                    {user}\n                  </ToggleButton>\n                ))}\n              </StyledToggleButtonGroup>\n            </div>\n\n            <TableSelector\n              listTable={componentsList.componentsStock[componentCurrent]}\n              componentsExisted={pedalCurrent.components || {}}\n              onChange={handleChange}\n            />\n          </CardContent>\n          <Divider />\n        </form>\n      </Card>\n    </Modal>\n  );\n}\n\nAddPedalModal.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n};\n\nAddPedalModal.defaultProps = {\n  open: false,\n  onClose: () => {},\n};\n\nexport default AddPedalModal;\n"]},"metadata":{},"sourceType":"module"}